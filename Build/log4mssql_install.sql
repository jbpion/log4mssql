/*
MIT License

Copyright (c) 2017 jbpion

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

SET NOCOUNT ON;

DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Installation started'); RAISERROR(@Message,0,1);
GO

IF ServerProperty('EngineEdition') <> 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Enabling the CLR for the current database'); RAISERROR(@Message,0,1);
	EXEC sp_configure 'clr enabled', 1;

	SELECT @Message = 'Running the reconfigure command'; RAISERROR(@Message,0,1);
	RECONFIGURE;
END
ELSE
BEGIN
	SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Install is running in Azure. Skipping CLR configuration.'); RAISERROR(@Message,0,1);
END
GO

IF ServerProperty('EngineEdition') <> 5
BEGIN     
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Setting TRUSTWORTHY on for current database to run CLR stored procedures and functions.'); RAISERROR(@Message,0,1); 
	ALTER DATABASE CURRENT SET TRUSTWORTHY ON
END
GO
GO
CREATE SCHEMA Logger
GO
CREATE SCHEMA LoggerBase
GO

      /*NOTE: This file is automatically generated by the build process. Modifications will be lost.*/
      IF  EXISTS (SELECT * FROM sys.assemblies asms WHERE asms.name = N'log4mssql' and is_user_defined = 1)
      DROP ASSEMBLY [log4mssql]
      GO
      
      CREATE ASSEMBLY [log4mssql]
      FROM 
      WITH PERMISSION_SET = EXTERNAL_ACCESS
      GO
      
GO
CREATE TABLE [LoggerBase].[Config_Saved] (
    [ConfigName]     VARCHAR (500) NOT NULL,
    [ConfigXML]      XML           NOT NULL,
    [CreateDateTime] DATETIME2 (7) CONSTRAINT [DF_Config_Saved_CreateDateTime] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [PK_Config_Saved] PRIMARY KEY CLUSTERED ([ConfigName] ASC)
);

GO
CREATE TABLE [LoggerBase].[Config_SessionContext] (
    [SessionContextID]      UNIQUEIDENTIFIER NULL,
    [Config]                XML              NULL,
    [OverrideLogLevelName]  VARCHAR (500)    NULL,
    [ExpirationDatetimeUTC] DATETIME2 (7)    NULL
);

GO
CREATE TABLE [LoggerBase].[Core_Level] (
    [LogLevelName]  VARCHAR (500) NOT NULL,
    [LogLevelValue] INT           NOT NULL,
    [LogLevelDesc]  VARCHAR (MAX) NOT NULL
);


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LoggerBase_Core_Level_LogLevelName]
    ON [LoggerBase].[Core_Level]([LogLevelName] ASC);

GO
IF NOT EXISTS (SELECT * FROM LoggerBase.Config_Saved WHERE ConfigName = 'DEFAULT')
INSERT INTO LoggerBase.Config_Saved
(
	 ConfigName
	,ConfigXML
)
VALUES
(
	 'DEFAULT'
	,'<log4mssql>
	<appender name="Saved-Default-Console" type="LoggerBase.Appender_ConsoleAppender">
	<layout type="LoggerBase.Layout_PatternLayout">
	<conversionPattern value="%timestamp %level %logger-%message" />
	</layout>
	</appender>
	<root>
	<level value="INFO" />
	<appender-ref ref="Saved-Default-Console" />
	</root>
	</log4mssql>'
)
GO


GO
IF NOT EXISTS (SELECT * FROM LoggerBase.Core_Level)
INSERT INTO LoggerBase.Core_Level VALUES
 ('OFF',2147483647,'Level designates a higher level than all the rest.'),
 ('EMERGENCY',120000,'Level designates very severe error events;System unusable, emergencies.'),
 ('FATAL',110000,'Level designates very severe error events that will presumably lead the application to abort.'),
 ('ALERT',100000,'Level designates very severe error events. Take immediate action, alerts.'),
 ('CRITCAL',90000,'Level designates very severe error events. Critical condition, critical.'),
 ('SEVERE',80000,'Level designates very severe error events.'),
 ('ERROR',70000,'Level designates error events that might still allow the application to continue running.'),
 ('WARN',60000,'Level designates potentially harmful situations.'),
 ('NOTICE',50000,'Level designates informational messages that highlight the progress of the application at coarse-grained level.'),
 ('INFO',40000,'Level designates informational messages that highlight the progress of the application at coarse-grained level.'),
 ('DEBUG',30000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('FINE',30000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('TRACE',20000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('FINER',20000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('VERBOSE',10000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('FINEST',10000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('ALL',-2147483647,'Level designates the lowest level possible.');
GO


GO

CREATE FUNCTION LoggerBase.Config_Appenders_Get(@Config XML)
RETURNS TABLE
AS

	RETURN

	SELECT 
	ROW_NUMBER() OVER (ORDER BY t.appender.value('./@name', 'VARCHAR(500)')) AS RowID
	,t.appender.value('./@name', 'VARCHAR(500)') AS AppenderName
	,t.appender.value('./@type', 'SYSNAME') as AppenderType
	,t.appender.query('.') AS AppenderConfig
	FROM @Config.nodes('/log4mssql/appender') as t(appender)


GO

CREATE FUNCTION LoggerBase.Core_Level_RetrieveFromSession()
RETURNS VARCHAR(500)
AS
BEGIN
	DECLARE @Level VARCHAR(500) =
	(
		SELECT OverrideLogLevelName
		FROM LoggerBase.Config_SessionContext
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	)

	RETURN @Level
END
GO

CREATE FUNCTION LoggerBase.Layout_GetConversionPatternFromConfig(@Config XML)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE @ConversionPattern VARCHAR(MAX)
    SELECT @ConversionPattern = t.conversionPattern.value('./@value', 'varchar(max)')
	FROM @Config.nodes('./layout/conversionPattern') as t(conversionPattern)

	RETURN @ConversionPattern

END
GO

CREATE FUNCTION LoggerBase.Layout_GetDate()
RETURNS DATE
AS
BEGIN

    RETURN CAST(GETDATE() AS DATE)

END
GO

CREATE FUNCTION LoggerBase.Layout_LoginUser()
RETURNS NVARCHAR(256)
AS
BEGIN

    RETURN SUSER_NAME()

END
GO

CREATE FUNCTION LoggerBase.Session_ContextID_Get()
RETURNS VARBINARY(128)
AS
BEGIN
	RETURN  CONTEXT_INFO()
END
GO

CREATE FUNCTION LoggerBase.Session_Level_Get()
RETURNS VARCHAR(500)
AS
BEGIN
	DECLARE @Level VARCHAR(500) =
	(
		SELECT OverrideLogLevelName
		FROM LoggerBase.Config_SessionContext
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	)

	RETURN @Level
END
GO

/*********************************************************************************************

    FUNCTION LoggerBase.Config_Layout

    Date:           07/07/2017
    Author:         Jerome Pion
    Description:    A simple implemention of a pattern layout that does simple token replacement.

    --TEST
	SELECT * FROM LoggerBase.Config_Layout('   <appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A1 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%-4timestamp [%thread] %-5level %logger %ndc - %message%newline" />
        </layout>
    </appender>')

**********************************************************************************************/

CREATE FUNCTION LoggerBase.Config_Layout(@Config XML)
RETURNS TABLE
AS
	RETURN
	SELECT 
	 t.layout.value('./@type', 'varchar(500)') AS LayoutType
	,t.layout.query('.')                       AS LayoutConfig
	FROM @Config.nodes('./appender/layout') AS t(layout)


GO

CREATE FUNCTION LoggerBase.Config_RetrieveFromSession()
RETURNS XML
AS
BEGIN
	DECLARE @Config XML =
	(
		SELECT Config
		FROM LoggerBase.Config_SessionContext
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	)

	RETURN @Config
END
GO

CREATE FUNCTION LoggerBase.Config_Root_Get(@Config XML)
RETURNS @Root TABLE
(
	 RowID      INT
	,LevelValue VARCHAR(500)
	,AppenderRef VARCHAR(500)
)
AS
BEGIN
	INSERT INTO @Root
	SELECT 
	ROW_NUMBER() OVER (ORDER BY AR.AppenderRef) AS RowID
	,LV.LevelValue
	,AR.AppenderRef
	FROM
	(
		SELECT @Config.value('(/log4mssql/root/level/@value)[1]', 'varchar(500)') AS LevelValue
	) AS LV
	CROSS JOIN
	(
		SELECT 
		t.rootnode.value('@ref', 'varchar(500)') AS AppenderRef
		FROM @Config.nodes('/log4mssql/root/appender-ref') as t(rootnode)
	) AS AR

	RETURN

END

GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_File_WriteTextFile requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
END
ELSE
BEGIN
EXEC('
CREATE PROCEDURE LoggerBase.Appender_File_WriteTextFile
(
	 @text   NVARCHAR(4000)
	,@path   NVARCHAR(4000) 
	,@append BIT
	,@exitCode INT OUTPUT
	,@errorMessage NVARCHAR(4000) OUTPUT
)
WITH EXECUTE AS CALLER
AS 
EXTERNAL NAME log4mssql.ReadWriteFiles.WriteTextFile
')
END
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Session_ContextID_Set

    Date:           07/24/2017
    Author:         Jerome Pion
    Description:    

    --TEST

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Session_ContextID_Set
(
     @ContextID UNIQUEIDENTIFIER
	,@Debug  BIT = 0
)

AS

    SET NOCOUNT ON

	SET CONTEXT_INFO @ContextID

GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Session_Level_Set

    Date:           07/17/2017
    Author:         Jerome Pion
    Description:    

    --TEST

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Session_Level_Set
(
     @LogLevelName VARCHAR(500)
	,@Debug  BIT = 0
)

AS

    SET NOCOUNT ON

	IF EXISTS (SELECT * FROM LoggerBase.Config_SessionContext
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	)
	BEGIN
		IF (@Debug = 1)
		BEGIN
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:Updating existing session:')
		END
		UPDATE LoggerBase.Config_SessionContext
		SET OverrideLogLevelName = @LogLevelName
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	END
	ELSE
	BEGIN

		DECLARE @SessionID UNIQUEIDENTIFIER = NEWID()
				
		IF (@Debug = 1)
		BEGIN
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:Creating new session:', @SessionID)
		END

		INSERT INTO LoggerBase.Config_SessionContext
		(SessionContextID, Config, OverrideLogLevelName, ExpirationDatetimeUTC)
		VALUES (@SessionID, NULL, @LogLevelName, DATEADD(DAY, 1, GETUTCDATE()))

		EXEC LoggerBase.Session_ContextID_Set @SessionID

	END

GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Session_Clear

    Date:           07/17/2017
    Author:         Jerome Pion
    Description:    

    --TEST

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Session_Clear
(
     @Debug  BIT = 0
)

AS

    SET NOCOUNT ON

	DELETE LoggerBase.Config_SessionContext
	WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Session_Config_Set

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    Returns the lowest-level config given the current state. 
					The order of preference is:
					*Passed in config XML
					*Saved config name
					*Session config
					*Saved default config
					*Hard-coded config

    --TEST

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Session_Config_Set
(
	 @Override XML = NULL
    ,@Config XML OUTPUT
	,@Debug  BIT = 0
)

AS

    SET NOCOUNT ON

	IF EXISTS (SELECT * FROM LoggerBase.Config_SessionContext
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	)
	BEGIN
		UPDATE LoggerBase.Config_SessionContext
		SET Config = @Config
		WHERE SessionContextID = LoggerBase.Session_ContextID_Get()
	END
	ELSE
	BEGIN
		DECLARE @SessionID UNIQUEIDENTIFIER = NEWID()
		INSERT INTO LoggerBase.Config_SessionContext
		(SessionContextID, Config, OverrideLogLevelName, ExpirationDatetimeUTC)
		VALUES (@SessionID, @Config, NULL, DATEADD(DAY, 1, GETUTCDATE()))
		
		EXEC LoggerBase.Session_Config_Set @SessionID

	END

GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Layout_PatternLayout

    Date:           07/18/2017
    Author:         Jerome Pion
    Description:    A simple implemention of a pattern layout that does simple token replacement.

    --TEST
	DECLARE @FormattedMessage VARCHAR(MAX)
	EXEC LoggerBase.Layout_PatternLayout 
	  @LoggerName   = 'LoggerName'
	, @LogLevelName = 'DEBUG'
	, @Message      = 'A test message'
	, @Config       = '<layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="[%timestamp] [%thread] %level - %logger - %message%newline"/></layout>'
	, @Debug        = 0
	, @FormattedMessage = @FormattedMessage OUTPUT
	SELECT @FormattedMessage

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Layout_PatternLayout
(
	  @LoggerName   VARCHAR(500)
	, @LogLevelName VARCHAR(500)
	, @Message      VARCHAR(MAX)
	, @Config       XML
	, @Debug        BIT=0
	, @FormattedMessage VARCHAR(MAX) OUTPUT
)
AS
	SET NOCOUNT ON
	
	DECLARE @ConversionPattern VARCHAR(MAX) = LoggerBase.Layout_GetConversionPatternFromConfig(@Config)

	SET @FormattedMessage = @ConversionPattern
	
	SET @FormattedMessage = REPLACE(@FormattedMessage COLLATE Latin1_General_CS_AS, '%c ', @LoggerName)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%d ', LoggerBase.Layout_GetDate())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%date', LoggerBase.Layout_GetDate())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%identity', LoggerBase.Layout_LoginUser())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%level', @LogLevelName)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%logger', @LoggerName)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%m ', @Message)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%message', @Message)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%n ', CHAR(13))
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%newline', CHAR(13))
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%p ', @LogLevelName)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%r ', SYSDATETIME())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '% ', @@SPID)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%thread', @@SPID)
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%timestamp', SYSDATETIME())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%u ', LoggerBase.Layout_LoginUser())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%username', LoggerBase.Layout_LoginUser())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%utcdate', SYSUTCDATETIME())
	SET @FormattedMessage = REPLACE(@FormattedMessage, '%w ', LoggerBase.Layout_LoginUser())

GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Config_Appenders_FilteredByLevel

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    Returns the appender configurations that still fire for the requested level.

    --TEST
	DECLARE @InfoConfig XML = '<log4mssql><appender name="Saved-Default-Console" type="LoggerBase.Appender_ConsoleAppender"><layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="%timestamp %level %logger-%message"/></layout></appender><root><level value="INFO"/><appender-ref ref="Saved-Default-Console"/></root></log4mssql>'
	DECLARE @RequestedLogLevelName VARCHAR(500) = 'DEBUG'

	EXEC LoggerBase.Config_Appenders_FilteredByLevel @Config = @InfoConfig, @RequestedLogLevelName = @RequestedLogLevelName, @Debug = 1

	DECLARE @DebugConfig XML = '<log4mssql><appender name="Saved-Default-Console" type="LoggerBase.Appender_ConsoleAppender"><layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="%timestamp %level %logger-%message"/></layout></appender><root><level value="DEBUG"/><appender-ref ref="Saved-Default-Console"/></root></log4mssql>'

	EXEC LoggerBase.Config_Appenders_FilteredByLevel @Config = @DebugConfig, @RequestedLogLevelName = @RequestedLogLevelName, @Debug = 1

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Config_Appenders_FilteredByLevel
(
	 @Config                XML
	,@RequestedLogLevelName VARCHAR(500)
	,@Debug                 BIT = 0               
)

AS

    SET NOCOUNT ON

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@Config:', CONVERT(VARCHAR(5000), @Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@RequestedLogLevelName:', @RequestedLogLevelName)
		DECLARE @RowCount INT = (SELECT COUNT(*) FROM LoggerBase.Config_Root_Get(@Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:LoggerBase.Config_Root returned rowcount:', @RowCount)
		SET @RowCount = (SELECT COUNT(*) FROM LoggerBase.Config_Appenders_Get(@Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:LoggerBase.Config_Appenders_Get returned rowcount:', @RowCount)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:OverrideLogLevel:', LoggerBase.Session_Level_Get()) 
	END

	SELECT 
	ROW_NUMBER() OVER (ORDER BY A.AppenderName) AS RowID
	,A.AppenderType
	,A.AppenderConfig
	FROM       LoggerBase.Config_Root_Get     (@Config) R
	INNER JOIN LoggerBase.Config_Appenders_Get(@Config) A ON R.AppenderRef = A.AppenderName
	--Check if we have an override in the session that changes the root-appender defined logging level.
	INNER JOIN LoggerBase.Core_Level                    LL ON COALESCE(LoggerBase.Session_Level_Get(),  R.LevelValue)  = LL.LogLevelName
	AND LL.LogLevelValue <= (SELECT LogLevelValue FROM LoggerBase.Core_Level WHERE LogLevelName = @RequestedLogLevelName)
	
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Config_Retrieve

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    Returns the lowest-level config given the current state. 
					The order of preference is:
					*Passed in config XML
					*Saved config name
					*Session config
					*Saved default config
					*Hard-coded config

    --TEST

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Config_Retrieve
(
	 @Override XML = NULL
    ,@Config XML OUTPUT
	,@Debug  BIT = 0
)

AS

    SET NOCOUNT ON

	IF (@Override IS NOT NULL) 
	BEGIN
		SET @Config = @Override
		RETURN
	END

	IF (@Override IS NULL)
	SELECT @Config = LoggerBase.Config_RetrieveFromSession()

	IF (@Config IS NULL)
	SELECT @Config = ConfigXML FROM LoggerBase.Config_Saved WHERE ConfigName = 'DEFAULT'

	IF (@Config IS NULL)
	SELECT @Config = '<log4mssql>
    <appender name="Hard-Coded-Console" type="Logger.Appender_ConsoleAppender">
        <layout type="Logger.Layout_PatternLayout">
            <conversionPattern value="%timestamp %level %logger-%message" />
        </layout>
    </appender>
	   <root>
        <level value="DEBUG" />
        <appender-ref ref="Hard-Coded-Console" />
    </root>
</log4mssql>'

GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Layout_FormatMessage

    Date:           07/14/2017
    Author:         Jerome Pion
    Description:    Execute the request layout and return the formatted message.

    --TEST
	DECLARE 
	  @LayoutTypeName   SYSNAME
    , @LoggerName       VARCHAR(500)
	, @LogLevelName     VARCHAR(500)
	, @Message          VARCHAR(MAX)
	, @LayoutConfig     XML
	, @Debug            BIT
    , @FormattedMessage VARCHAR(MAX)

	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = 'LoggerBase.Layout_PatternLayout'
		, @LoggerName      = 'LoggerName'
		, @LogLevelName    = 'DEBUG'
		, @Message         = 'A test message'
		, @LayoutConfig    = '<layout type="Logger.Layout_PatternLayout"><conversionPattern value="[%timestamp] [%thread] %level - %logger - %message%newline"/></layout>'
		, @Debug           = 1
		, @FormattedMessage = @FormattedMessage OUTPUT

	SELECT @FormattedMessage

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Layout_FormatMessage
(
	  @LayoutTypeName   SYSNAME
    , @LoggerName       VARCHAR(500)
	, @LogLevelName     VARCHAR(500)
	, @Message          VARCHAR(MAX)
	, @LayoutConfig     XML
	, @Debug            BIT
	, @FormattedMessage VARCHAR(MAX) OUTPUT
)

AS

    SET NOCOUNT ON
	
	DECLARE @SQL NVARCHAR(MAX) = CONCAT(@LayoutTypeName, ' @LoggerName, @LogLevelName, @Message, @Config, @Debug, @FormattedMessage OUTPUT')

	IF (@Debug = 1) 
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@SQL:', @SQL)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
	END

	EXECUTE sp_executesql @SQL, N'@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @Debug BIT, @FormattedMessage VARCHAR(MAX) OUTPUT'
	,@LoggerName       = @LoggerName
	,@LogLevelName     = @LogLevelName
	,@Message          = @Message
	,@Config           = @LayoutConfig
	,@Debug            = @Debug
	,@FormattedMessage = @FormattedMessage OUTPUT

GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
END
ELSE
BEGIN
EXEC('
CREATE PROCEDURE [LoggerBase].[Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery]
(
	@ConnectionString NVARCHAR(4000),
	@Query NVARCHAR(4000),
	@Parameters XML,
	@CommandTimeout INT = 5,
	@Debug BIT = 0
)
WITH EXECUTE AS CALLER
AS
EXTERNAL NAME [log4mssql].[StoredProcedures].[LoggerBase_Exec_Non_Transacted_Query]
')
END
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_ConsoleAppender

    Date:           07/14/2017
    Author:         Jerome Pion
    Description:    Invokes the requested appender using the provided XML configuration.

    --TEST
	DECLARE @LoggerName   VARCHAR(500) = 'TestAppenderLoggerBase'
	DECLARE @LogLevelName VARCHAR(500) = 'DEBUG'
	DECLARE @Message      VARCHAR(MAX) = 'Appender test message!'
	DECLARE @Config       XML          = '<appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
	<!-- A1 uses PatternLayout -->
	<layout type="LoggerBase.Layout_PatternLayout">
	<conversionPattern value="%timestamp [%thread] %level %LoggerBase - %message%newline"/>
	</layout>
	</appender>'

	EXEC LoggerBase.Appender_ConsoleAppender 
	  @LoggerName   = @LoggerName
	, @LogLevelName = @LogLevelName 
	, @Message      = @Message
	, @Config       = @Config
	, @Debug        = 1

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Appender_ConsoleAppender (@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @Debug BIT=0)
AS
	
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Message:', @Message)

	DECLARE @FormattedMessage VARCHAR(MAX)
	DECLARE @LayoutType       SYSNAME
	DECLARE @LayoutConfig     XML
	DECLARE @SQL              NVARCHAR(MAX)

	SELECT @LayoutType = LayoutType, @LayoutConfig = LayoutConfig FROM LoggerBase.Config_Layout(@Config)

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Config:'    , CONVERT(VARCHAR(MAX), @Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LayoutType:', @LayoutType)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@SQL:'       , @SQL)
	END

	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutType
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @Debug           = @Debug
		, @FormattedMessage = @FormattedMessage OUTPUT

	PRINT @FormattedMessage

GO
GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_MSSQLDatabaseAppender requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
END
ELSE
BEGIN
EXEC('
/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_MSSQLDatabaseAppender
   
    Property of Clearent, LLC
    Date:           07/07/2017
    Author:         Jerome Pion
    Description:    Writes logging entries to database without enlisting in a transaction.

	/*jpion: 2017-07-29: Changed name to reflect that tacking "Enlist=false" to the connection string may only work for MSSQL Server*/
    --TEST

	DECLARE @Config XML = 
''<appender name="MSSQLAppender" type="LoggerBase.Appender_MSSQLDatabaseAppender">
	<connectionString value="data source=localhost;initial catalog=LoggerTest;integrated security=true;" />
    <commandText value="INSERT INTO LoggerBase.TestLog ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%date" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@thread" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%thread" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@log_level" />
        <dbType value="VarChar" />
	   <size value="50" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%level" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@logger" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%logger" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@message" />
        <dbType value="VarChar" />
	   <size value="4000" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%message" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@exception" />
        <dbType value="VarChar" />
	   <size value="2000" />
        <layout type="LoggerBase.Layout_PatternLayout" />
    </parameter>
</appender>''

IF OBJECT_ID(''LoggerBase.TestLog'') IS NOT NULL DROP TABLE LoggerBase.TestLog
CREATE TABLE LoggerBase.TestLog
(
	[Date] DATE
	,[Thread] INT
	,[Level] VARCHAR(500)
	,[Logger] VARCHAR(500)
	,[Message] VARCHAR(MAX)
	,[Exception] VARCHAR(MAX)
)

EXEC LoggerBase.Appender_MSSQLDatabaseAppender @LoggerName = ''TestLogger'', @LogLevelName = ''DEBUG'', @Message = ''This is a test.'', @Config = @Config
, @Debug = 1
SELECT * FROM LoggerBase.TestLog

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Appender_MSSQLDatabaseAppender
(@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @Debug BIT=0)
AS
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),'':@Message:'', @Message)
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),'':@Config:'', CONVERT(VARCHAR(MAX),@Config))

	--Get command text
	DECLARE @CommandText VARCHAR(MAX)
	DECLARE @ConnectionString VARCHAR(MAX)

	SELECT @CommandText = t.commandText.value(''./@value'', ''varchar(MAX)'') 
	FROM @Config.nodes(''/appender/commandText'') as t(commandText)

	SELECT @ConnectionString = t.connectionString.value(''./@value'', ''varchar(MAX)'') 
	FROM @Config.nodes(''/appender/connectionString'') as t(connectionString)
	--Loop through parameters. 

	SET @ConnectionString = CONCAT(@ConnectionString, '';Enlist=false;'')

	SELECT 
	ROW_NUMBER() OVER (ORDER BY t.parameter.value(''(parameterName/@value)[1]'', ''varchar(MAX)'')) AS RowID
	,t.parameter.value(''(parameterName/@value)[1]'', ''varchar(MAX)'') AS ParameterName
	,t.parameter.value(''(dbType/@value)[1]'', ''varchar(MAX)'') AS dbType
	,t.parameter.value(''(size/@value)[1]'', ''varchar(MAX)'') AS size
	,t.parameter.value(''(layout/@type)[1]'', ''varchar(MAX)'') AS LayoutType
	,t.parameter.value(''(layout/conversionPattern/@value)[1]'', ''varchar(MAX)'') AS ConversionPattern
	,t.parameter.query(''./layout'') AS ParameterXML
	,CAST('''' AS VARCHAR(MAX)) AS ParameterValue
	INTO #Parameters
	FROM @Config.nodes(''/appender/parameter'') as t(parameter)
		--Get parameter name and datatype
			--Use layout to get value.
			select * from #Parameters
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), '':@CommandText:'', @CommandText)

	DECLARE @Counter INT
	DECLARE @Limit INT
	DECLARE @SQL NVARCHAR(MAX)

	DECLARE @LayoutTypeName SYSNAME
	DECLARE @LayoutConfig XML
	DECLARE @FormattedMessage VARCHAR(MAX)

	SELECT @Counter = MIN(RowID), @Limit = MAX(RowID)
	FROM #Parameters

	WHILE (@Counter <= @Limit)
	BEGIN
		SELECT @LayoutTypeName = LayoutType
		,@LayoutConfig = ParameterXML
		FROM #Parameters
		WHERE 1=1
		AND RowID = @Counter

	 	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutTypeName
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @Debug           = @Debug
		, @FormattedMessage = @FormattedMessage OUTPUT

	  UPDATE #Parameters SET ParameterValue = @FormattedMessage
	  WHERE 1=1
	  AND RowID = @Counter

		SET @Counter += 1

		IF (@Debug = 1)
		BEGIN
			PRINT CONCAT(''['',OBJECT_NAME(@@PROCID), '']:@LayoutTypeName:'', @LayoutTypeName)
			PRINT CONCAT(''['',OBJECT_NAME(@@PROCID), '']:@LoggerName:'', @LoggerName)
			PRINT CONCAT(''['',OBJECT_NAME(@@PROCID), '']:@LogLevelName:'', @LogLevelName)
			PRINT CONCAT(''['',OBJECT_NAME(@@PROCID), '']:@Message:'', @Message)
			PRINT CONCAT(''['',OBJECT_NAME(@@PROCID), '']:@LayoutConfig:'', CONVERT(VARCHAR(MAX), @LayoutConfig))
		END
	END

	--SELECT * FROM #Parameters

	--Take the parameters and construct the parameters definition and parameters/value list
	DECLARE @ParameterDefinition NVARCHAR(MAX)
	SELECT @ParameterDefinition = COALESCE(@ParameterDefinition+'','' ,'''') + CONCAT(ParameterName, '' '' , dbType, '' = '''''', ParameterValue, '''''''')
	FROM #Parameters

--SELECT @SQL = CONCAT(''DECLARE '', @ParameterDefinition, ''; '', @CommandText)
IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), '':@SQL:'', @CommandText)
--BEGIN
----EXEC (@SQL)
--	--EXEC LoggerBase.Appender_MSSQLDatabaseAppender_ExecNonTransactedQuery
--	-- @connectionstring = @ConnectionString
--	--,@query = @SQL
--END
--SELECT 1 AS Tag
--,NULL AS Parent
--,NULL AS [Parameters!1!ParameterName]
--,NULL AS [Parameter!2!DBType]
--,NULL AS [Parameter!2!!CData]
--UNION ALL
--select 2 AS Tag
--,1 AS Parent
--,ParameterName  
--,DBType         
--,ParameterValue
-- FROM #Parameters 
-- FOR XML EXPLICIT;

DECLARE @ParametersXML xml

SET @ParametersXML = (
	SELECT *
	FROM
	(
	SELECT 1        AS Tag
	,NULL           AS Parent
	,NULL           AS [Parameters!1!ParameterName]
	,NULL		 AS [Parameter!2!ParameterName]
	,NULL           AS [Parameter!2!DBType]
	,NULL           AS [Parameter!2!Size]
	,NULL           AS [Parameter!2!!CData]
	UNION ALL
    SELECT 
     2              AS Tag
    ,1              AS Parent
    ,ParameterName  AS [Parameter!2!ParameterName]
    ,ParameterName  AS [Parameter!2!ParameterName]
    ,DBType         AS [Parameter!2!DBType]
    ,Size           AS [Parameter!2!Size]
    ,ParameterValue AS [Parameter!2!!CData]
    FROM #Parameters
	) AS N
    FOR XML EXPLICIT
	--FOR XML PATH(''Parameter''), ROOT(''Parameters'')
 )

 --print CONCAT(''@ParametersXML '', CONVERT(VARCHAR(8000), @ParametersXML))
 IF (@Debug = 1) PRINT CONCAT(''@ParametersXML '', CONVERT(VARCHAR(8000), @ParametersXML))
 ----EXEC (@SQL)
EXEC [LoggerBase].[Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery]
	 @ConnectionString = @ConnectionString
	,@Query            = @CommandText
	,@Parameters       = @ParametersXML
	,@CommandTimeout   = 5
	,@Debug            = @Debug 

')
END
GO
IF OBJECT_ID('LoggerBase.Appender_LocalDatabaseAppender') IS NOT NULL DROP PROCEDURE LoggerBase.Appender_LocalDatabaseAppender
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_LocalDatabaseAppender
   
    Property of Clearent, LLC
    Date:           11/30/2017
    Author:         Jerome Pion
    Description:    Writes logging entries to the local database within the in-scope transaction.

    --TEST

	DECLARE @Config XML = 
'<appender name="MSSQLAppender" type="LoggerBase.Appender_LocalDatabaseAppender">
    <commandText value="INSERT INTO LoggerBase.TestLog ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%date" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@thread" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%thread" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@log_level" />
        <dbType value="VarChar" />
	   <size value="50" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%level" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@logger" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%logger" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@message" />
        <dbType value="VarChar" />
	   <size value="4000" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%message" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@exception" />
        <dbType value="VarChar" />
	   <size value="2000" />
        <layout type="LoggerBase.Layout_PatternLayout" />
    </parameter>
</appender>'

IF OBJECT_ID('LoggerBase.TestLog') IS NOT NULL DROP TABLE LoggerBase.TestLog
CREATE TABLE LoggerBase.TestLog
(
	[Date] DATE
	,[Thread] INT
	,[Level] VARCHAR(500)
	,[Logger] VARCHAR(500)
	,[Message] VARCHAR(MAX)
	,[Exception] VARCHAR(MAX)
)

EXEC LoggerBase.Appender_LocalDatabaseAppender @LoggerName = 'TestLogger', @LogLevelName = 'DEBUG', @Message = 'This is a test.', @Config = @Config
, @Debug = 1
SELECT * FROM LoggerBase.TestLog

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Appender_LocalDatabaseAppender
(@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @Debug BIT=0)
AS
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),':@Message:', @Message)
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),':@Config:', CONVERT(VARCHAR(MAX),@Config))

	--Get command text
	DECLARE @CommandText VARCHAR(MAX)

	SELECT @CommandText = t.commandText.value('./@value', 'varchar(MAX)') 
	FROM @Config.nodes('/appender/commandText') as t(commandText)

	--Loop through parameters. 

	SELECT 
	ROW_NUMBER() OVER (ORDER BY t.parameter.value('(parameterName/@value)[1]', 'varchar(MAX)')) AS RowID
	,t.parameter.value('(parameterName/@value)[1]', 'varchar(MAX)') AS ParameterName
	,t.parameter.value('(dbType/@value)[1]', 'varchar(MAX)') AS dbType
	,t.parameter.value('(size/@value)[1]', 'varchar(MAX)') AS size
	,t.parameter.value('(layout/@type)[1]', 'varchar(MAX)') AS LayoutType
	,t.parameter.value('(layout/conversionPattern/@value)[1]', 'varchar(MAX)') AS ConversionPattern
	,t.parameter.query('./layout') AS ParameterXML
	,CAST('' AS VARCHAR(MAX)) AS ParameterValue
	INTO #Parameters
	FROM @Config.nodes('/appender/parameter') as t(parameter)
		--Get parameter name and datatype
			--Use layout to get value.
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@CommandText:', @CommandText)

	DECLARE @Counter INT
	DECLARE @Limit INT
	DECLARE @SQL NVARCHAR(MAX)

	DECLARE @LayoutTypeName SYSNAME
	DECLARE @LayoutConfig XML
	DECLARE @FormattedMessage VARCHAR(MAX)

	SELECT @Counter = MIN(RowID), @Limit = MAX(RowID)
	FROM #Parameters

	WHILE (@Counter <= @Limit)
	BEGIN
		SELECT @LayoutTypeName = LayoutType
		,@LayoutConfig = ParameterXML
		FROM #Parameters
		WHERE 1=1
		AND RowID = @Counter

	 	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutTypeName
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @Debug           = @Debug
		, @FormattedMessage = @FormattedMessage OUTPUT

	  UPDATE #Parameters SET ParameterValue = @FormattedMessage
	  WHERE 1=1
	  AND RowID = @Counter

		SET @Counter += 1

		IF (@Debug = 1)
		BEGIN
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LayoutTypeName:', @LayoutTypeName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LoggerName:', @LoggerName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LogLevelName:', @LogLevelName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@Message:', @Message)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LayoutConfig:', CONVERT(VARCHAR(MAX), @LayoutConfig))
		END
	END

	--SELECT * FROM #Parameters

	--Take the parameters and construct the parameters definition and parameters/value list
	DECLARE @ParameterDefinition NVARCHAR(MAX)
	SELECT @ParameterDefinition = COALESCE(@ParameterDefinition+',' ,'') + CONCAT(ParameterName, ' ' , dbType, IIF(size IS NOT NULL, CONCAT('(', size, ')'), ''), ' = ''', ParameterValue, '''')
	FROM #Parameters

IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@SQL:', @CommandText)

SELECT @SQL = CONCAT('DECLARE ', @ParameterDefinition, '; ', @CommandText)
IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@SQL:', @SQL)
EXEC (@SQL)
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Logger_Base

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    A base logging SP that other level-specific loggers will use, e.g. Logger.Debug

    --TEST
	DECLARE @Config XML = 
'<log4mssql>
    <!-- A1 is set to be a ConsoleAppender -->
    <appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A1 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="****TEST RESULT****%timestamp [%thread] %level %logger - %message" />
        </layout>
    </appender>
    
	<appender name="A2" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A2 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="****TEST RESULT****%timestamp [%thread] %level %logger - %message" />
        </layout>
    </appender>

<appender name="MSSQLAppender" type="LoggerBase.Appender_MSSQLAppender">
    <commandText value="INSERT INTO LoggerBase.TestLog ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="LoggerBase.Layout_RawTimeStampLayout" />
    </parameter>
    <parameter>
        <parameterName value="@thread" />
        <dbType value="varchar(255)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%thread" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@log_level" />
        <dbType value="varchar(50)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%level" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@logger" />
        <dbType value="varchar(255)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%logger" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@message" />
        <dbType value="varchar(4000)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%message" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@exception" />
        <dbType value="varchar(2000)" />
        <layout type="LoggerBase.Layout_PatternLayout" />
    </parameter>
</appender>

    <!-- Set root logger level to DEBUG and its only appenders to A1, A2, MSSQLAppender -->
    <root>
        <level value="DEBUG" />
        <appender-ref ref="A1" />
		<appender-ref ref="A2" />
    </root>

	<!--For the "TestProcedure" logger set the level of its "A2" appender to INFO -->
	<logger name="TestProcedure">
		<level value="INFO" />
		<appender-ref ref="A2" />
	</logger>
	<logger name="TestProcedure2">
		<level value="INFO" />
		<appender-ref ref="A2" />
	</logger>
</log4mssql>'

DECLARE @RequestedLogLevelName VARCHAR(100) = 'DEBUG'
DECLARE @LoggerName VARCHAR(500) = 'JustATestLogger'

EXEC LoggerBase.Logger_Base 
  @Message               = 'Some message.'
, @LoggerName            = @LoggerName
, @Config                = @Config
, @RequestedLogLevelName = 'DEBUG'
, @Debug                 = 1

EXEC LoggerBase.Logger_Base 
  @Message               = 'Some message.'
, @LoggerName            = 'DefaultConfigLogger'
, @RequestedLogLevelName = 'DEBUG'
, @Debug                 = 1

**********************************************************************************************/

CREATE PROCEDURE LoggerBase.Logger_Base 
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @RequestedLogLevelName VARCHAR(100)
	, @Debug                 BIT = 0
)

AS

    SET NOCOUNT ON
	DECLARE @PrivateConfig XML
	EXEC LoggerBase.Config_Retrieve @Override = @Config, @Config = @PrivateConfig OUTPUT, @Debug = @Debug

	IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@Config:', CONVERT(VARCHAR(MAX), @Config))

	DECLARE @Appenders TABLE
	(
		RowID INT
		,AppenderType SYSNAME
		,AppenderConfig XML
	)
	INSERT INTO @Appenders
	EXEC LoggerBase.Config_Appenders_FilteredByLevel
		 @Config                = @PrivateConfig           
		,@RequestedLogLevelName = @RequestedLogLevelName
		,@Debug                 = @Debug

	DECLARE @Counter INT
	DECLARE @Limit   INT
	DECLARE @SQL     NVARCHAR(MAX)
	DECLARE @AppenderConfig XML

	SELECT @Counter = MIN(RowID), @Limit = MAX(RowID)
	FROM @Appenders

	WHILE (@Counter <= @Limit)
	BEGIN
		SELECT @SQL = CONCAT(A.AppenderType, ' @LoggerName, @LogLevelName, @Message, @Config, @Debug')
		,@AppenderConfig = AppenderConfig
		FROM @Appenders A
		WHERE 1=1
		AND RowID = @Counter

		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@SQL:', @SQL)
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@Message:', @Message)
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@AppenderConfig:', CONVERT(VARCHAR(MAX), @AppenderConfig))

		EXECUTE sp_executesql @SQL, N'@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @Debug BIT'
		, @LoggerName   = @LoggerName
		, @LogLevelName = @RequestedLogLevelName
		, @Message      = @Message
		, @Config       = @AppenderConfig
		, @Debug        = @Debug

		SET @Counter += 1

	END

GO

/*********************************************************************************************

    PROCEDURE Logger.Debug

    Date:           07/07/2017
    Author:         Jerome Pion
    Description:    Log a DEBUG level message.

    --TEST
	EXEC Logger.Debug 'A test debug message', 'Test Logger'
	EXEC Logger.Debug @Message = 'A test debug message', @LoggerName = 'Test Logger', @Debug = 1

	EXEC LoggerBase.Session_Level_Set 'DEBUG', @Debug = 1
	SELECT LoggerBase.Session_ContextID_Get()
	SELECT LoggerBase.Session_Level_Get()
	
	EXEC Logger.Debug 'A test debug message', 'Test Logger'
	EXEC Logger.Debug @Message = 'A test debug message', @LoggerName = 'Test Logger', @Debug = 1

**********************************************************************************************/

CREATE PROCEDURE Logger.Debug
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @Debug                 BIT          = 0
)

AS

    SET NOCOUNT ON

	EXEC LoggerBase.Logger_Base 
	  @Message               = @Message
	, @LoggerName            = @LoggerName
	, @RequestedLogLevelName = 'DEBUG'
	, @Config                = @Config
	, @StoredConfigName      = @StoredConfigName
	, @Debug                 = @Debug

GO

/*********************************************************************************************

    PROCEDURE Logger.ERROR

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a ERROR level message.

    --TEST
	EXEC Logger.ERROR 'A test ERROR message', 'Test Logger'
	EXEC Logger.ERROR @Message = 'A test ERROR message', @LoggerName = 'Test Logger', @DEBUG = 1

	EXEC LoggerBase.Session_Level_Set 'ERROR', @ERROR = 1
	SELECT LoggerBase.Session_ContextID_Get()
	SELECT LoggerBase.Session_Level_Get()
	
	EXEC Logger.ERROR 'A test ERROR message', 'Test Logger'
	EXEC Logger.ERROR @Message = 'A test ERROR message', @LoggerName = 'Test Logger', @DEBUG = 1

**********************************************************************************************/

CREATE PROCEDURE Logger.Error
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	EXEC LoggerBase.Logger_Base 
	  @Message               = @Message
	, @LoggerName            = @LoggerName
	, @RequestedLogLevelName = 'ERROR'
	, @Config                = @Config
	, @StoredConfigName      = @StoredConfigName
	, @DEBUG                 = @DEBUG

GO

/*********************************************************************************************

    PROCEDURE Logger.Fatal

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a Fatal level message.

    --TEST
	EXEC Logger.Fatal 'A test Fatal message', 'Test Logger'
	EXEC Logger.Fatal @Message = 'A test Fatal message', @LoggerName = 'Test Logger', @DEBUG = 1

	EXEC LoggerBase.Session_Level_Set 'Fatal', @Fatal = 1
	SELECT LoggerBase.Session_ContextID_Get()
	SELECT LoggerBase.Session_Level_Get()
	
	EXEC Logger.Fatal 'A test Fatal message', 'Test Logger'
	EXEC Logger.Fatal @Message = 'A test Fatal message', @LoggerName = 'Test Logger', @DEBUG = 1

**********************************************************************************************/

CREATE PROCEDURE Logger.Fatal
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	EXEC LoggerBase.Logger_Base 
	  @Message               = @Message
	, @LoggerName            = @LoggerName
	, @RequestedLogLevelName = 'FATAL'
	, @Config                = @Config
	, @StoredConfigName      = @StoredConfigName
	, @DEBUG                 = @DEBUG

GO

/*********************************************************************************************

    PROCEDURE Logger.INFO

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a INFO level message.

    --TEST
	EXEC Logger.INFO 'A test INFO message', 'Test Logger'
	EXEC Logger.INFO @Message = 'A test INFO message', @LoggerName = 'Test Logger', @DEBUG = 1

	EXEC LoggerBase.Session_Level_Set 'INFO', @INFO = 1
	SELECT LoggerBase.Session_ContextID_Get()
	SELECT LoggerBase.Session_Level_Get()
	
	EXEC Logger.INFO 'A test INFO message', 'Test Logger'
	EXEC Logger.INFO @Message = 'A test INFO message', @LoggerName = 'Test Logger', @DEBUG = 1

**********************************************************************************************/

CREATE PROCEDURE Logger.Info
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	EXEC LoggerBase.Logger_Base 
	  @Message               = @Message
	, @LoggerName            = @LoggerName
	, @RequestedLogLevelName = 'INFO'
	, @Config                = @Config
	, @StoredConfigName      = @StoredConfigName
	, @DEBUG                 = @DEBUG

GO

/*********************************************************************************************

    PROCEDURE Logger.WARN

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a WARN level message.

    --TEST
	EXEC Logger.WARN 'A test WARN message', 'Test Logger'
	EXEC Logger.WARN @Message = 'A test WARN message', @LoggerName = 'Test Logger', @DEBUG = 1

	EXEC LoggerBase.Session_Level_Set 'WARN', @WARN = 1
	SELECT LoggerBase.Session_ContextID_Get()
	SELECT LoggerBase.Session_Level_Get()
	
	EXEC Logger.WARN 'A test WARN message', 'Test Logger'
	EXEC Logger.WARN @Message = 'A test WARN message', @LoggerName = 'Test Logger', @DEBUG = 1

**********************************************************************************************/

CREATE PROCEDURE Logger.Warn
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	EXEC LoggerBase.Logger_Base 
	  @Message               = @Message
	, @LoggerName            = @LoggerName
	, @RequestedLogLevelName = 'WARN'
	, @Config                = @Config
	, @StoredConfigName      = @StoredConfigName
	, @DEBUG                 = @DEBUG

GO
RAISERROR('',0,1)WITH NOWAIT;
RAISERROR('+-----------------------------------------+',0,1)WITH NOWAIT;
RAISERROR('|                                         |',0,1)WITH NOWAIT;
RAISERROR('| log4mssql installation complete         |',0,1)WITH NOWAIT;
RAISERROR('|                                         |',0,1)WITH NOWAIT;
RAISERROR('+-----------------------------------------+',0,1)WITH NOWAIT;
GO
