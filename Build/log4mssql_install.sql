/*
MIT License

Copyright (c) 2017 jbpion

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

SET NOCOUNT ON;

DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Installation started'); RAISERROR(@Message,0,1);
GO

IF ServerProperty('EngineEdition') <> 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Enabling the CLR for the current database'); RAISERROR(@Message,0,1);
	EXEC sp_configure 'clr enabled', 1;

	SELECT @Message = 'Running the reconfigure command'; RAISERROR(@Message,0,1);
	RECONFIGURE;
END
ELSE
BEGIN
	SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Install is running in Azure. Skipping CLR configuration.'); RAISERROR(@Message,0,1);
END
GO

IF ServerProperty('EngineEdition') <> 5
BEGIN     
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':Setting TRUSTWORTHY on for current database to run CLR stored procedures and functions.'); RAISERROR(@Message,0,1); 
	ALTER DATABASE CURRENT SET TRUSTWORTHY ON
END
GO
GO
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'Logger') EXEC ('CREATE SCHEMA Logger')
GO
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'LoggerBase') EXEC('CREATE SCHEMA LoggerBase')
GO
IF OBJECT_ID('dbo.LogConfiguration') IS NULL
CREATE TYPE [dbo].[LogConfiguration] FROM [nvarchar](max) NULL
GO


GO
IF OBJECT_ID('LoggerBase.Util_Split') IS NOT NULL
DROP FUNCTION [LoggerBase].[Util_Split]
GO

CREATE FUNCTION [LoggerBase].[Util_Split]
(
    @List NVARCHAR(MAX) 
   ,@Delimiter NVARCHAR(255)
)
RETURNS TABLE
WITH SCHEMABINDING AS
RETURN
WITH E1(N)        AS ( SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 
                         UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 
                         UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
       E2(N)        AS (SELECT 1 FROM E1 a, E1 b),
       E4(N)        AS (SELECT 1 FROM E2 a, E2 b),
       E42(N)       AS (SELECT 1 FROM E4 a, E2 b),
       cteTally(N)  AS (SELECT 0 UNION ALL SELECT TOP (DATALENGTH(ISNULL(@List,1))) 
                         ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM E42),
       cteStart(N1) AS (SELECT t.N+1 FROM cteTally t
                         WHERE (SUBSTRING(@List,t.N,1) = @Delimiter OR t.N = 0))

SELECT Item = SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(@Delimiter,@List,s.N1),0)-s.N1,8000))
,ROW_NUMBER() OVER (ORDER BY s.N1) AS PropertyId
FROM cteStart s;
GO


GO

    /*NOTE: This file is automatically generated by the build process. Modifications will be lost.*/
    IF  EXISTS (SELECT * FROM sys.assemblies asms WHERE asms.name = N'log4mssql' and is_user_defined = 1)
    DROP ASSEMBLY [log4mssql]
    GO
    
    CREATE ASSEMBLY [log4mssql]
    FROM 
    WITH PERMISSION_SET = UNSAFE
    GO
    
GO
IF OBJECT_ID('LoggerBase.Config_Saved') IS NULL
CREATE TABLE [LoggerBase].[Config_Saved] (
    [ConfigName]     VARCHAR (500) NOT NULL,
    [ConfigXML]      XML           NOT NULL,
    [CreateDateTime] DATETIME2 (7) CONSTRAINT [DF_Config_Saved_CreateDateTime] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [PK_Config_Saved] PRIMARY KEY CLUSTERED ([ConfigName] ASC)
);

GO
CREATE TABLE [LoggerBase].[Core_Level] (
    [LogLevelName]  VARCHAR (500) NOT NULL,
    [LogLevelValue] INT           NOT NULL,
    [LogLevelDesc]  VARCHAR (MAX) NOT NULL
);


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LoggerBase_Core_Level_LogLevelName]
    ON [LoggerBase].[Core_Level]([LogLevelName] ASC);

GO

IF OBJECT_ID('') IS NOT NULL 
DROP TABLE [LoggerBase].[Util_Configuration_Properties]
GO

CREATE TABLE [LoggerBase].[Util_Configuration_Properties](
	[ConfigurationPropertyId] [int] NULL,
	[ConfigurationPropertyName] [varchar](250) NULL,
	[ConfigurationPropertyDataType] [varchar](500) NULL
) ON [PRIMARY]
GO

INSERT INTO LoggerBase.Util_Configuration_Properties
([ConfigurationPropertyId], [ConfigurationPropertyName], [ConfigurationPropertyDataType])
VALUES
 (1, 'ConfigurationXml', 'XML')
,(2, 'LoggerName', 'VARCHAR(500)')
,(3, 'LogLevel', 'VARCHAR(500)')
,(4, 'CorrelationId', 'UNIQUEIDENTIFIER')
,(5, 'SavedConfigurationName', 'VARCHAR(500)')



GO
IF NOT EXISTS (SELECT * FROM LoggerBase.Config_Saved WHERE ConfigName = 'DEFAULT')
INSERT INTO LoggerBase.Config_Saved
(
	 ConfigName
	,ConfigXML
)
VALUES
(
	 'DEFAULT'
	,'<log4mssql>
	<appender name="Saved-Default-Console" type="LoggerBase.Appender_ConsoleAppender">
	<layout type="LoggerBase.Layout_PatternLayout">
	<conversionPattern value="%timestamp %level %logger-%message" />
	</layout>
	</appender>
	<root>
	<level value="INFO" />
	<appender-ref ref="Saved-Default-Console" />
	</root>
	</log4mssql>'
)
GO


GO
IF NOT EXISTS (SELECT * FROM LoggerBase.Core_Level)
INSERT INTO LoggerBase.Core_Level VALUES
 ('OFF',2147483647,'Level designates a higher level than all the rest.'),
 ('EMERGENCY',120000,'Level designates very severe error events;System unusable, emergencies.'),
 ('FATAL',110000,'Level designates very severe error events that will presumably lead the application to abort.'),
 ('ALERT',100000,'Level designates very severe error events. Take immediate action, alerts.'),
 ('CRITCAL',90000,'Level designates very severe error events. Critical condition, critical.'),
 ('SEVERE',80000,'Level designates very severe error events.'),
 ('ERROR',70000,'Level designates error events that might still allow the application to continue running.'),
 ('WARN',60000,'Level designates potentially harmful situations.'),
 ('NOTICE',50000,'Level designates informational messages that highlight the progress of the application at coarse-grained level.'),
 ('INFO',40000,'Level designates informational messages that highlight the progress of the application at coarse-grained level.'),
 ('DEBUG',30000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('FINE',30000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('TRACE',20000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('FINER',20000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('VERBOSE',10000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('FINEST',10000,'Level designates fine-grained informational events that are most useful to debug an application.'),
 ('ALL',-2147483647,'Level designates the lowest level possible.');
GO


GO
-- =============================================
-- Author:		Jerome Pion
-- Create date: 02/13/2019
-- Description:	Gets a probably unique identifier to use as a correlation id for logging
-- =============================================
CREATE VIEW LoggerBase.CorrelationId_Helper
AS
	SELECT CAST(SUBSTRING(CONVERT(VARCHAR(MAX), NEWID()), 1, 20) AS VARCHAR(20)) AS CorrelationId
GO

/*
DROP FUNCTION LoggerBase.Core_Level_ConvertNameToValue
*/
CREATE FUNCTION [LoggerBase].[Core_Level_ConvertNameToValue](@LogLevelName VARCHAR(500), @DefaultType CHAR(3))
RETURNS INT
AS
BEGIN
	DECLARE @Default INT = NULL
	DECLARE @Result INT
	IF (COALESCE(@DefaultType, 'MIN') = 'MIN') SELECT @Default = MIN(LogLevelValue) FROM LoggerBase.Core_Level
	IF (@DefaultType = 'MAX') SELECT @Default = MAX(LogLevelValue) FROM LoggerBase.Core_Level 

	SELECT @Result = COALESCE(MAX(LogLevelValue), @Default) --Use "MAX" to make sure we get back a null if no rows match. If it returns null return the min level for the table.
	FROM LoggerBase.Core_Level
	WHERE LogLevelName = @LogLevelName

	RETURN @Result

END
	
GO


GO

CREATE FUNCTION [LoggerBase].[Appender_Filter_RangeFile_Apply](@Config XML, @CurrentLogLevelName VARCHAR(500))
RETURNS TABLE
AS 
RETURN
SELECT 
	ROW_NUMBER() OVER (ORDER BY t.appender.value('./@name', 'VARCHAR(500)')) AS RowID
	,t.appender.value('./@name', 'VARCHAR(500)') AS AppenderName
	,t.appender.value('./@type', 'SYSNAME') as AppenderType
	,t.appender.query('.') AS AppenderConfig
	FROM @Config.nodes('/log4mssql/appender') as t(appender)
	WHERE LoggerBase.Core_Level_ConvertNameToValue(@CurrentLogLevelName, 'MIN')
	BETWEEN 
	LoggerBase.Core_Level_ConvertNameToValue(t.appender.value('(./filter/levelMin/@value)[1]', 'VARCHAR(500)'), 'MIN') AND
	LoggerBase.Core_Level_ConvertNameToValue(t.appender.value('(./filter/levelMax/@value)[1]', 'VARCHAR(500)'), 'MAX') 
GO


GO

CREATE FUNCTION LoggerBase.Config_Appenders_Get(@Config XML)
RETURNS TABLE
AS

	RETURN

	SELECT 
	ROW_NUMBER() OVER (ORDER BY t.appender.value('./@name', 'VARCHAR(500)')) AS RowID
	,t.appender.value('./@name', 'VARCHAR(500)') AS AppenderName
	,t.appender.value('./@type', 'SYSNAME') as AppenderType
	,t.appender.query('.') AS AppenderConfig
	FROM @Config.nodes('/log4mssql/appender') as t(appender)


GO

CREATE FUNCTION LoggerBase.Layout_GetConversionPatternFromConfig(@Config XML)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE @ConversionPattern VARCHAR(MAX)
    SELECT @ConversionPattern = t.conversionPattern.value('./@value', 'varchar(max)')
	FROM @Config.nodes('./layout/conversionPattern') as t(conversionPattern)

	RETURN @ConversionPattern

END
GO
IF OBJECT_ID('LoggerBase.Layout_ApplicationName') IS NOT NULL
SET NOEXEC ON
GO

CREATE FUNCTION LoggerBase.Layout_ApplicationName()
RETURNS NVARCHAR(256)
AS 
BEGIN
	RETURN NULL
END

GO

SET NOEXEC OFF
GO
/*********************************************************************************************

    FUNCTION LoggerBase.Layout_ApplicationName

    Date:           02/15/2019
    Author:         Jerome Pion
    Description:    Gets the name application name of the connecting context.

**********************************************************************************************/
ALTER FUNCTION LoggerBase.Layout_ApplicationName()
RETURNS NVARCHAR(256)
AS
BEGIN

    RETURN APP_NAME()

END
GO

CREATE FUNCTION LoggerBase.Layout_GetDate()
RETURNS DATE
AS
BEGIN

    RETURN CAST(GETDATE() AS DATE)

END
GO

CREATE FUNCTION LoggerBase.Layout_LoginUser()
RETURNS NVARCHAR(256)
AS
BEGIN

    RETURN SUSER_NAME()

END
GO
IF OBJECT_ID('LoggerBase.Layout_JsonEscape') IS NOT NULL
SET NOEXEC ON
GO

CREATE FUNCTION LoggerBase.Layout_JsonEscape(@Text NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
AS
BEGIN
	RETURN NULL
END
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    FUNCTION LoggerBase.Layout_JSONLayout

    Date:           02/14/2019
    Author:         Jerome Pion
    Description:    A layout for converting a delimited token string to a JSON string.

    --TEST
	DECLARE @TestString NVARCHAR(100) ='"Quotes". This is a backslash \. And a tab	'
	SET @TestString = @TestString + CHAR(2)
	SELECT @TestString
	SELECT LoggerBase.Layout_JsonEscape(@TestString)

**********************************************************************************************/
ALTER FUNCTION LoggerBase.Layout_JsonEscape(@Text NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
AS
BEGIN

	SET @Text = REPLACE(@Text, '\', '\\')
	SELECT @Text = REPLACE(@Text, SpecialCharacter, EncodedSequence)
	FROM (
		SELECT EncodingName = 'Quotation mark', SpecialCharacter = '"', EncodedSequence = '\"'
		--UNION ALL SELECT RowId = 1,EncodingName = 'Reverse solidus', SpecialCharacter = '\', EncodedSequence = '\\'
		UNION ALL SELECT EncodingName = 'Solidus', SpecialCharacter = '/', EncodedSequence = '\/'
		UNION ALL SELECT EncodingName = 'Backspace', SpecialCharacter = CHAR(8), EncodedSequence = '\b'
		UNION ALL SELECT EncodingName = 'Form feed', SpecialCharacter = CHAR(12), EncodedSequence = '\f'
		UNION ALL SELECT EncodingName = 'New line', SpecialCharacter = CHAR(10), EncodedSequence = '\n'
		UNION ALL SELECT EncodingName = 'Carriage Return', SpecialCharacter = CHAR(13), EncodedSequence = '\r'
		UNION ALL SELECT EncodingName = 'Horizontal tab', SpecialCharacter = CHAR(9), EncodedSequence = '\t'
		UNION ALL SELECT EncodingName = 'CHAR(0)/null', SpecialCharacter = CHAR(0), EncodedSequence = '\u0000'
		UNION ALL SELECT EncodingName = 'CHAR(1)/Start Of Heading', SpecialCharacter = CHAR(1), EncodedSequence = '\u0001'
		UNION ALL SELECT EncodingName = 'CHAR(2)/Start Of Text', SpecialCharacter = CHAR(2), EncodedSequence = '\u0002'
		UNION ALL SELECT EncodingName = 'CHAR(3)/End Of Text', SpecialCharacter = CHAR(3), EncodedSequence = '\u0003'
		UNION ALL SELECT EncodingName = 'CHAR(4)/End Of Transmission', SpecialCharacter = CHAR(4), EncodedSequence = '\u0004'
		UNION ALL SELECT EncodingName = 'CHAR(5)/Enquiry', SpecialCharacter = CHAR(5), EncodedSequence = '\u0005'
		UNION ALL SELECT EncodingName = 'CHAR(6)/Acknowledge', SpecialCharacter = CHAR(6), EncodedSequence = '\u0006'
		UNION ALL SELECT EncodingName = 'CHAR(7)/Bell', SpecialCharacter = CHAR(7), EncodedSequence = '\u0007'
		UNION ALL SELECT EncodingName = 'CHAR(11)/Vertical Tab', SpecialCharacter = CHAR(11), EncodedSequence = '\u000B'
		UNION ALL SELECT EncodingName = 'CHAR(14)/Shift Out', SpecialCharacter = CHAR(14), EncodedSequence = '\u000E'
		UNION ALL SELECT EncodingName = 'CHAR(15)/Shift In', SpecialCharacter = CHAR(15), EncodedSequence = '\u000F'
		UNION ALL SELECT EncodingName = 'CHAR(16)/Synchronous Idle', SpecialCharacter = CHAR(16), EncodedSequence = '\u0010'
		UNION ALL SELECT EncodingName = 'CHAR(17)/Device Control 1', SpecialCharacter = CHAR(17), EncodedSequence = '\u0011'
		UNION ALL SELECT EncodingName = 'CHAR(18)/Device Control 2', SpecialCharacter = CHAR(18), EncodedSequence = '\u0012'
		UNION ALL SELECT EncodingName = 'CHAR(19)/Device Control 3', SpecialCharacter = CHAR(19), EncodedSequence = '\u0013'
		UNION ALL SELECT EncodingName = 'CHAR(20)/Device Control 4', SpecialCharacter = CHAR(20), EncodedSequence = '\u0014'
		UNION ALL SELECT EncodingName = 'CHAR(21)/Negative Acknowledge', SpecialCharacter = CHAR(21), EncodedSequence = '\u0015'
		UNION ALL SELECT EncodingName = 'CHAR(22)/Synchronous Idle', SpecialCharacter = CHAR(22), EncodedSequence = '\u0016'
		UNION ALL SELECT EncodingName = 'CHAR(23)/End Of Trans Block', SpecialCharacter = CHAR(23), EncodedSequence = '\u0017'
		UNION ALL SELECT EncodingName = 'CHAR(24)/Cancel', SpecialCharacter = CHAR(24), EncodedSequence = '\u0018'
		UNION ALL SELECT EncodingName = 'CHAR(25)/End Of Medium', SpecialCharacter = CHAR(25), EncodedSequence = '\u0019'
		UNION ALL SELECT EncodingName = 'CHAR(26)/Substitute', SpecialCharacter = CHAR(26), EncodedSequence = '\u001A'
		UNION ALL SELECT EncodingName = 'CHAR(27)/Escape', SpecialCharacter = CHAR(27), EncodedSequence = '\u001B'
		UNION ALL SELECT EncodingName = 'CHAR(28)/File Separator', SpecialCharacter = CHAR(28), EncodedSequence = '\u001C'
		UNION ALL SELECT EncodingName = 'CHAR(29)/Group Separator', SpecialCharacter = CHAR(29), EncodedSequence = '\u001D'
		UNION ALL SELECT EncodingName = 'CHAR(30)/Record Separator', SpecialCharacter = CHAR(30), EncodedSequence = '\u001E'
		UNION ALL SELECT EncodingName = 'CHAR(31)/Unit Separator', SpecialCharacter = CHAR(31), EncodedSequence = '\u001F'
	) AS E

	RETURN @Text

END
GO
IF OBJECT_ID('LoggerBase.Layout_OriginalUser') IS NOT NULL
SET NOEXEC ON
GO

CREATE FUNCTION LoggerBase.Layout_OriginalUser()
RETURNS NVARCHAR(256)
AS 
BEGIN
	RETURN NULL
END

GO

SET NOEXEC OFF
GO
/*********************************************************************************************

    FUNCTION LoggerBase.Layout_OriginalUser

    Date:           02/15/2019
    Author:         Jerome Pion
    Description:    Gets the name of the original login user even in case of impersonation.

**********************************************************************************************/
ALTER FUNCTION [LoggerBase].[Layout_OriginalUser]()
RETURNS NVARCHAR(256)
AS
BEGIN

    RETURN ORIGINAL_LOGIN()

END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
Author:		Jerome Pion
Create date: 02/27/2019
Description:	Replaces tokens in pattern with values

SELECT LoggerBase.Layout_ReplaceTokens ('Hello, World', '%d %dbname [%message]', 'MyLogger', 'INFO', 'ABC-123', 'MyServer', 'MyDatabase', 1234, %date)
=============================================*/
CREATE FUNCTION LoggerBase.Layout_ReplaceTokens 
(
	 @Message VARCHAR(MAX)
	,@ConversionPattern VARCHAR(MAX)
	,@LoggerName   VARCHAR(500)
	,@LogLevelName VARCHAR(500)
	,@CorrelationId VARCHAR(20) = NULL
	,@ServerName SYSNAME
	,@DatabaseName SYSNAME
	,@SessionID INT
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	--DECLARE @FormattedMessage VARCHAR(MAX)

	-- Add the T-SQL statements to compute the return value here
	SELECT @ConversionPattern = REPLACE(@ConversionPattern, Token, COALESCE(TokenCurrentValue,''))
	FROM LoggerBase.Layout_GetTokens(@LoggerName, @LogLevelName, @Message, @CorrelationId, @DatabaseName, @ServerName, @SessionId)

	-- Return the result of the function
	RETURN @ConversionPattern

END
GO

GO
/*********************************************************************************************

    FUNCTION LoggerBase.Layout_Tokens_Pivot

    Date:           02/27/2019
    Author:         Jerome Pion
    Description:    A function for pivoting the functions split string.

    --TEST
	DECLARE @TokenValues VARCHAR(MAX) = 'MyServerName|MyDatabaseName|1234'
	
	SELECT * FROM LoggerBase.Layout_Tokens_Pivot(@TokenValues)

	SELECT @TokenValues = 'MyServerName||1234'
	SELECT * FROM LoggerBase.Layout_Tokens_Pivot(@TokenValues)

**********************************************************************************************/

IF OBJECT_ID (N'LoggerBase.Layout_Tokens_Pivot') IS NOT NULL
   DROP FUNCTION LoggerBase.Layout_Tokens_Pivot
GO

CREATE FUNCTION LoggerBase.Layout_Tokens_Pivot(@TokenValues VARCHAR(MAX))
RETURNS @Values TABLE 
(
     ServerName  SYSNAME
	,DatabaseName SYSNAME
    ,SessionId INT
)
AS
-- body of the function
BEGIN
	DECLARE @Pivot TABLE
	(
		PropertyId INT
		,ServerName BIT
		,DatabaseName BIT
		,SessionId BIT
	)

	INSERT INTO @Pivot
	(
		PropertyId,
		ServerName,
		DatabaseName,
		SessionId
	)
	VALUES
	 (1, 1, 0, 0)
	,(2, 0, 1, 0)
	,(3, 0, 0, 1)

	INSERT INTO @Values
	SELECT 
	 MAX(IIF(ServerName =1, V.Item, NULL)) AS ServerName
	,MAX(IIF(P.DatabaseName =1, V.Item, NULL)) AS DatabaseName
	,MAX(IIF(P.SessionId =1, V.Item, NULL)) AS SessionId
	FROM LoggerBase.Util_Split(@TokenValues, '|') V
	INNER JOIN @Pivot P ON V.PropertyId = P.PropertyId

	RETURN
   
END
GO


GO
IF OBJECT_ID('LoggerBase.Layout_GetTokens') IS NOT NULL
SET NOEXEC ON
GO

CREATE FUNCTION LoggerBase.Layout_GetTokens()
RETURNS TABLE
AS 
	RETURN SELECT NULL AS Token


GO

SET NOEXEC OFF
GO
/*********************************************************************************************

    FUNCTION Logger.Layout_GetTokens

    Date:           02/15/2019
    Author:         Jerome Pion
    Description:    Gets the list and values, if available, of layout tokens.

	--TEST:
	SELECT * FROM LoggerBase.Layout_GetTokens('TESTLOGGERNAME', 'DEBUG', 'Hello, world!', '1234', 'ADatabaseName', 'LocalServerName', 20)
	SELECT * FROM LoggerBase.Layout_GetTokens('TESTLOGGERNAME', 'DEBUG', 'Hello, world!', '1234', NULL, NULL, NULL)

**********************************************************************************************/
ALTER FUNCTION LoggerBase.Layout_GetTokens
(
      @LoggerName   VARCHAR(500)
	, @LogLevelName VARCHAR(500)
	, @Message      VARCHAR(MAX)
	, @CorrelationId VARCHAR(20)
	, @DatabaseName SYSNAME
	, @ServerName   SYSNAME
	, @SessionId    INT
)
RETURNS TABLE
AS RETURN
(
	SELECT '%d ' AS Token, 'Date' AS TokenProperty, '' AS TokenDescription, CONCAT(CONVERT(CHAR(10), LoggerBase.Layout_GetDate(), 120), ' ') 
	AS TokenCurrentValue
	UNION ALL SELECT '%date', 'Date', '', CONCAT(CONVERT(CHAR(10), LoggerBase.Layout_GetDate(), 120), '') 
	UNION ALL SELECT '%logger',        'Logger',          '', @LoggerName
	UNION ALL SELECT '%identity',      'Identity',        '', LoggerBase.Layout_LoginUser()
	UNION ALL SELECT '%m ',             'Message',         '', CONCAT(@Message, ' ')
	UNION ALL SELECT '%message',       'Message',         '', @Message
	UNION ALL SELECT '%n ', 'NewLine', '', CHAR(13)
	UNION ALL SELECT '%newline', 'NewLine', '', CHAR(13)
	UNION ALL SELECT '%Level',             'Level',           '', @LogLevelName
	UNION ALL SELECT '%p ',             'Level',           '', CONCAT(@LogLevelName,' ')
	UNION ALL SELECT '%r ',             'TimeStamp',       '', CONCAT(SYSDATETIME(),' ')
	UNION ALL SELECT '% ',              'SessionId',       '', CONCAT(COALESCE(@SessionId, @@SPID), ' ')
	UNION ALL SELECT '%thread',        'SessionId',       '', CONCAT(COALESCE(@SessionId, @@SPID), '')
	UNION ALL SELECT '%spid',          'SessionId',       '', CONCAT(COALESCE(@SessionId, @@SPID), '')
	UNION ALL SELECT '%timestamp',     'TimeStamp',       '', CONCAT(SYSDATETIME(),'')
	UNION ALL SELECT '%u ',             'UserName',        '',CONCAT( LoggerBase.Layout_LoginUser(),' ')
	UNION ALL SELECT '%utcdate',       'UTCDate',         '', CONCAT(SYSUTCDATETIME(),'')
	UNION ALL SELECT '%w ',             'UserName',        '', CONCAT(LoggerBase.Layout_LoginUser(),' ')
	UNION ALL SELECT '%correlationid', 'CorrelationId',   '', @CorrelationId
	UNION ALL SELECT '%appname',       'ApplicationName', '', LoggerBase.Layout_ApplicationName()
	UNION ALL SELECT '%ouser',         'OriginalUser',    '', LoggerBase.Layout_OriginalUser()
	UNION ALL SELECT '%originaluser',  'OriginalUser',    '', LoggerBase.Layout_OriginalUser()
	UNION ALL SELECT '%server',        'ServerName',      '', CONCAT(COALESCE(@ServerName, @@SERVERNAME), '')
	UNION ALL SELECT '%dbname',        'DatabaseName',    '', CONCAT(COALESCE(@DatabaseName, DB_NAME()), '')
	
	-- ('%d', 'Date', CONVERT(CHAR(10), LoggerBase.Layout_GetDate(), 120))
	--,('%date', 'Date', CONVERT(CHAR(10), LoggerBase.Layout_GetDate(), 120))
	--,('%identity', 'Identity', LoggerBase.Layout_LoginUser())
	--,('%level', 'Level', @LogLevelName)
	--,('%logger', 'Logger', @LoggerName)
	--,('%m', 'Message', @Message)
	--,('%message', 'Message', @Message)
	--,('%p', 'Level', @LogLevelName)
	--,('%r', 'TimeStamp', CONCAT(SYSDATETIME(),''))
	--,('%', 'SessionId', CONCAT(@@SPID, ''))
	--,('%thread', 'SessionId', CONCAT(@@SPID, ''))
	--,('%spid', 'SessionId', CONCAT(@@SPID, ''))
	--,('%timestamp', 'TimeStamp', CONCAT(SYSDATETIME(),''))
	--,('%u', 'UserName', LoggerBase.Layout_LoginUser())
	--,('%username', 'UserName', LoggerBase.Layout_LoginUser())
	--,('%utcdate', 'UTCDate', CONCAT(SYSUTCDATETIME(),''))
	--,('%w', 'UserName', LoggerBase.Layout_LoginUser())
	--,('%correlationid', 'CorrelationId',  @CorrelationId)
)
GO
GO
/*
Assign a GUID to use at installation time to identify all logging by this database's process.
*/
DECLARE @MutexName NVARCHAR(4000) = NEWID()
DECLARE @SQL VARCHAR(8000) = CONCAT('
CREATE FUNCTION LoggerBase.Appender_MutexName()
RETURNS NVARCHAR(4000)
AS
BEGIN

    RETURN ''', @MutexName, ''' 
END')

EXEC (@SQL)

GO

/*********************************************************************************************

    FUNCTION LoggerBase.Config_Layout

    Date:           07/07/2017
    Author:         Jerome Pion
    Description:    A simple implemention of a pattern layout that does simple token replacement.

    --TEST
	SELECT * FROM LoggerBase.Config_Layout('   <appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A1 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%-4timestamp [%thread] %-5level %logger %ndc - %message%newline" />
        </layout>
    </appender>')

**********************************************************************************************/

CREATE FUNCTION LoggerBase.Config_Layout(@Config XML)
RETURNS TABLE
AS
	RETURN
	SELECT 
	 t.layout.value('./@type', 'varchar(500)') AS LayoutType
	,t.layout.query('.')                       AS LayoutConfig
	FROM @Config.nodes('./appender/layout') AS t(layout)


GO

CREATE FUNCTION LoggerBase.Config_Root_Get(@Config XML)
RETURNS @Root TABLE
(
	 RowID      INT
	,LevelValue VARCHAR(500)
	,AppenderRef VARCHAR(500)
)
AS
BEGIN
	INSERT INTO @Root
	SELECT 
	ROW_NUMBER() OVER (ORDER BY AR.AppenderRef) AS RowID
	,LV.LevelValue
	,AR.AppenderRef
	FROM
	(
		SELECT @Config.value('(/log4mssql/root/level/@value)[1]', 'varchar(500)') AS LevelValue
	) AS LV
	CROSS JOIN
	(
		SELECT 
		t.rootnode.value('@ref', 'varchar(500)') AS AppenderRef
		FROM @Config.nodes('/log4mssql/root/appender-ref') as t(rootnode)
	) AS AR

	RETURN

END

GO
IF OBJECT_ID('LoggerBase.Util_Split') IS NOT NULL
DROP FUNCTION [LoggerBase].[Util_Split]
GO

CREATE FUNCTION [LoggerBase].[Util_Split]
(
    @List NVARCHAR(MAX) 
   ,@Delimiter NVARCHAR(255)
)
RETURNS TABLE
WITH SCHEMABINDING AS
RETURN
WITH E1(N)        AS ( SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 
                         UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 
                         UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
       E2(N)        AS (SELECT 1 FROM E1 a, E1 b),
       E4(N)        AS (SELECT 1 FROM E2 a, E2 b),
       E42(N)       AS (SELECT 1 FROM E4 a, E2 b),
       cteTally(N)  AS (SELECT 0 UNION ALL SELECT TOP (DATALENGTH(ISNULL(@List,1))) 
                         ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM E42),
       cteStart(N1) AS (SELECT t.N+1 FROM cteTally t
                         WHERE (SUBSTRING(@List,t.N,1) = @Delimiter OR t.N = 0))

SELECT Item = SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(@Delimiter,@List,s.N1),0)-s.N1,8000))
,ROW_NUMBER() OVER (ORDER BY s.N1) AS PropertyId
FROM cteStart s;
GO


GO
IF OBJECT_ID('LoggerBase.Configuration_Get_Properties') IS NOT NULL
DROP FUNCTION [LoggerBase].[Configuration_Get_Properties]
GO

CREATE FUNCTION [LoggerBase].[Configuration_Get_Properties](@Configuration NVARCHAR(MAX))
RETURNS TABLE
AS RETURN
(
	SELECT 
	 CP.ConfigurationPropertyId
	,CP.ConfigurationPropertyName
	,CP.ConfigurationPropertyDataType
	,O.Item AS ConfigurationPropertyValue
	FROM LoggerBase.Util_Configuration_Properties CP
	LEFT JOIN LoggerBase.Util_Split(@Configuration, CHAR(1)) O ON CP.ConfigurationPropertyId = O.PropertyId
)
GO


GO
CREATE FUNCTION LoggerBase.VersionInfo()
RETURNS TABLE
AS
RETURN
SELECT  [Version] = '1.0.0.0001'
       ,V.SqlVersion
       ,V.SqlBuild
       ,V.SqlEdition
  FROM
  (
    SELECT CAST(VI.major+'.'+VI.minor AS NUMERIC(10,2)) AS SqlVersion,
           CAST(VI.build+'.'+VI.revision AS NUMERIC(10,2)) AS SqlBuild,
           SqlEdition
      FROM
      (
        SELECT PARSENAME(PSV.ProductVersion,4) major,
               PARSENAME(PSV.ProductVersion,3) minor, 
               PARSENAME(PSV.ProductVersion,2) build,
               PARSENAME(PSV.ProductVersion,1) revision,
               Edition AS SqlEdition
          FROM (  
			SELECT CAST(SERVERPROPERTY('ProductVersion')AS NVARCHAR(128)) ProductVersion,
			CAST(SERVERPROPERTY('Edition')AS NVARCHAR(128)) Edition
		) AS PSV
      )VI
  )V;
GO
IF OBJECT_ID('Logger.Configuration_Set') IS NOT NULL 
DROP FUNCTION [Logger].[Configuration_Set]
GO

-- =============================================
-- Author:		Jerome Pion
-- Create date: 02/12/2019
-- Description:	Sets values on the configuration "object"
-- =============================================
CREATE FUNCTION LoggerBase.[Configuration_Set] 
(
	-- Add the parameters for the function here
	 @Configuration NVARCHAR(MAX)
	,@PropertyName  VARCHAR(500)
	,@PropertyValue NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	-- Declare the return variable here
	--DECLARE @Result NVARCHAR(MAX)
	DECLARE @Delimiter CHAR(1) = CHAR(1)-- '-'
	DECLARE @NewConfiguration NVARCHAR(MAX) --= @Delimiter
	DECLARE @ConfigurationTable TABLE
	(
		 ConfigurationPropertyId       INT
		,ConfigurationPropertyName     VARCHAR(500)
		,ConfigurationPropertyDataType VARCHAR(500)
		,ConfigurationPropertyValue    NVARCHAR(MAX)
	)

	--EXEC (CONCAT('SELECT TRY_CAST('', @

	INSERT INTO @ConfigurationTable
	SELECT 
	 CP.ConfigurationPropertyId
	,CP.ConfigurationPropertyName
	,CP.ConfigurationPropertyDataType
	,O.Item AS ConfigurationPropertyValue
	FROM LoggerBase.Util_Configuration_Properties CP
	LEFT JOIN LoggerBase.Util_Split(@Configuration, @Delimiter) O ON CP.ConfigurationPropertyId = O.PropertyId
	-- Return the result of the function
	
	UPDATE @ConfigurationTable SET ConfigurationPropertyValue = @PropertyValue WHERE ConfigurationPropertyName = @PropertyName

	IF (@@ROWCOUNT = 0)
	BEGIN
		--PRINT CONCAT('ERROR: Unable to find property with name "', @PropertyName, '". Set failed.')
		SET @NewConfiguration = @Configuration
	END
	ELSE
	BEGIN

		SELECT @NewConfiguration = COALESCE(@NewConfiguration + @Delimiter, '') + COALESCE(ConfigurationPropertyValue,'')
		FROM @ConfigurationTable
	END

	RETURN @NewConfiguration

END
GO


GO
-- =============================================
-- Author:		Jerome Pion
-- Create date: 02/12/2019
-- Description:	Gets a value from the configuration "object"
-- =============================================
CREATE FUNCTION LoggerBase.Configuration_Get
(
	-- Add the parameters for the function here
	 @Configuration NVARCHAR(MAX)
	,@PropertyName  VARCHAR(500)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result NVARCHAR(MAX)
	DECLARE @Delimiter CHAR(1) = CHAR(1)-- '-'
	
	SELECT @Result = COALESCE(O.Item,'')
	FROM LoggerBase.Util_Configuration_Properties CP
	LEFT JOIN LoggerBase.Util_Split(@Configuration, @Delimiter) O ON CP.ConfigurationPropertyId = O.PropertyId
	WHERE 1=1
	AND CP.ConfigurationPropertyName = @PropertyName
	-- Return the result of the function
	
	RETURN @Result

END
GO


GO
/*********************************************************************************************

    FUNCTION Logger.Tokens_List

    Date:           02/15/2019
    Author:         Jerome Pion
    Description:    Gets the list and values, if available, of layout tokens.

	--TEST:
	SELECT * FROM Logger.Tokens_List()

**********************************************************************************************/
CREATE FUNCTION Logger.Tokens_List()
RETURNS TABLE
AS RETURN
(
	SELECT * 
	FROM LoggerBase.Layout_GetTokens(NULL, NULL, NULL, NULL, NULL, NULL, NULL)
)
GO
GO

-- =============================================
-- Author:		Jerome Pion
-- Create date: 02/21/2019
-- Description:	Format an error message
-- =============================================
CREATE FUNCTION LoggerBase.DefaultErrorMessage 
(
	
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	RETURN CONCAT('Procedure ', ERROR_PROCEDURE(), ', Line ', ERROR_LINE(), ', Error(', ERROR_NUMBER(),') ', ERROR_MESSAGE())
END
GO

GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_File_Private_WriteTextFile requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
	SET NOEXEC ON
END
GO

IF (OBJECT_ID('LoggerBase.Appender_File_Private_WriteTextFile') IS NOT NULL AND ServerProperty('EngineEdition') <> 5) 
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_File_Private_WriteTextFile
(
	 @text   NVARCHAR(4000)
	,@path   NVARCHAR(4000) 
	,@append BIT
	,@exitCode INT OUTPUT
	,@errorMessage NVARCHAR(4000) OUTPUT
)
WITH EXECUTE AS CALLER
AS 
EXTERNAL NAME log4mssql.ReadWriteFiles.WriteTextFile
GO

IF ServerProperty('EngineEdition') <> 5 SET NOEXEC OFF
GO

ALTER PROCEDURE LoggerBase.Appender_File_Private_WriteTextFile
(
	 @text   NVARCHAR(4000)
	,@path   NVARCHAR(4000) 
	,@append BIT
	,@exitCode INT OUTPUT
	,@errorMessage NVARCHAR(4000) OUTPUT
)
WITH EXECUTE AS CALLER
AS 
EXTERNAL NAME log4mssql.ReadWriteFiles.WriteTextFile
GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_File_Private_WriteTextFileWithMutex requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
	SET NOEXEC ON
END
GO

IF (OBJECT_ID('LoggerBase.Appender_File_Private_WriteTextFileWithMutex') IS NOT NULL AND ServerProperty('EngineEdition') <> 5) 
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_File_Private_WriteTextFileWithMutex
	@text [NVARCHAR](4000),
	@path [NVARCHAR](4000),
	@append [BIT],
	@mutexname NVARCHAR(4000),
	@exitCode [INT] OUTPUT,
	@errorMessage [NVARCHAR](4000) OUTPUT
WITH EXECUTE AS CALLER
AS
EXTERNAL NAME log4mssql.WriteFilesWithMutex.WriteTextFile
GO
GO

GO
IF OBJECT_ID('LoggerBase.Layout_PatternLayout') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Layout_PatternLayout
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Layout_PatternLayout

    Date:           07/18/2017
    Author:         Jerome Pion
    Description:    A simple implemention of a pattern layout that does simple token replacement.

    --TEST
	DECLARE @FormattedMessage VARCHAR(MAX)
	EXEC LoggerBase.Layout_PatternLayout 
	  @LoggerName   = 'LoggerName'
	, @LogLevelName = 'DEBUG'
	, @Message      = 'A test message'
	, @Config       = '<layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="[%timestamp] [%thread] %level - %logger - %message%newline"/></layout>'
	, @Debug        = 1
	, @FormattedMessage = @FormattedMessage OUTPUT
	SELECT @FormattedMessage

	DECLARE @FormattedMessage2 VARCHAR(MAX)
	EXEC LoggerBase.Layout_PatternLayout 
	  @LoggerName   = 'LoggerName'
	, @LogLevelName = 'DEBUG'
	, @Message      = 'A test message'
	, @Config       = '<layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="[%timestamp] [%thread] [%dbname] %level - %logger - %message%newline"/></layout>'
	, @Debug        = 1
	, @TokenValues = 'AServer|ADbName|'
	, @FormattedMessage = @FormattedMessage2 OUTPUT

	SELECT @FormattedMessage2

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Layout_PatternLayout
(
	  @LoggerName   VARCHAR(500)
	, @LogLevelName VARCHAR(500)
	
	, @Message      VARCHAR(MAX)
	, @Config       XML
	, @Debug        BIT=0
	, @CorrelationId VARCHAR(20) = NULL
	, @TokenValues   VARCHAR(MAX)
	, @FormattedMessage VARCHAR(MAX) OUTPUT
)
AS
	SET NOCOUNT ON

	IF (@Debug = 1) 
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Message:', @Message)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@CorrelationId:', @CorrelationId)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Config:', CONVERT(VARCHAR(MAX), @Config))
	END
	
	DECLARE @ConversionPattern VARCHAR(MAX) = LoggerBase.Layout_GetConversionPatternFromConfig(@Config)

	IF (@Debug = 1) 
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@ConversionPattern:', @ConversionPattern)
	END

	--SET @FormattedMessage = @ConversionPattern

	IF (@Debug = 1) 
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FormattedMessage (before replace):', @FormattedMessage)
	END

	DECLARE @ServerName SYSNAME, @DatabaseName SYSNAME, @SessionID INT
	SELECT @ServerName = ServerName, @DatabaseName = DatabaseName, @SessionID = SessionID
	FROM LoggerBase.Layout_Tokens_Pivot(@TokenValues)

	
	--SELECT @FormattedMessage = REPLACE(@FormattedMessage, Token, COALESCE(TokenCurrentValue,''))
	--FROM LoggerBase.Layout_GetTokens(@LoggerName, @LogLevelName, @Message, @CorrelationId, @DatabaseName, @ServerName, @SessionId)

	SELECT @FormattedMessage = LoggerBase.Layout_ReplaceTokens(@Message, @ConversionPattern, @LoggerName, @LogLevelName, @CorrelationId, @ServerName, @DatabaseName, @SessionID) 
--(
--	 @Message VARCHAR(MAX)
--	,@ConversionPattern VARCHAR(MAX)
--	,@LoggerName   VARCHAR(500)
--	,@LogLevelName VARCHAR(500)
--	,@CorrelationId VARCHAR(20) = NULL
--	,@ServerName SYSNAME
--	,@DatabaseName SYSNAME
--	,@SessionID INT
--)
	
	

GO
IF OBJECT_ID('LoggerBase.Layout_JSONLayout') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Layout_JSONLayout
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Layout_JSONLayout

    Date:           02/14/2019
    Author:         Jerome Pion
    Description:    A layout for converting a delimited token string to a JSON string.

    --TEST
	DECLARE @FormattedMessage VARCHAR(MAX)
	DECLARE @TokenValues VARCHAR(MAX) = 'LocalServerName|ADbName|20'
	
	EXEC LoggerBase.Layout_JSONLayout 
	  @LoggerName   = 'LoggerName'
	, @LogLevelName = 'DEBUG'
	, @Message      = 'A test message'
	, @Config       = '<layout type="LoggerBase.Layout_JSONLayout"><conversionPattern value="%timestamp|%server|%dbname|%thread|%level|%correlationid|%logger|%message" delimiter="|"/></layout>'
	, @Debug        = 0
	, @TokenValues  = @TokenValues
	, @FormattedMessage = @FormattedMessage OUTPUT
	SELECT @FormattedMessage

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Layout_JsonLayout
(
	  @LoggerName   VARCHAR(500)
	, @LogLevelName VARCHAR(500)
	, @Message      VARCHAR(MAX)
	, @Config       XML
	, @Debug        BIT=0
	, @CorrelationId VARCHAR(20) = NULL
	, @TokenValues   VARCHAR(MAX)
	, @FormattedMessage VARCHAR(MAX) OUTPUT
)
AS
	SET NOCOUNT ON

	IF (@Debug = 1) 
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@CorrelationId:', @CorrelationId)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Config:', CONVERT(VARCHAR(MAX), @Config))
	END
	
	DECLARE @ConversionPattern VARCHAR(MAX) = LoggerBase.Layout_GetConversionPatternFromConfig(@Config)
	DECLARE @Delimiter CHAR(1) = (SELECT t.conversionPattern.value('./@delimiter', 'char(1)')
	FROM @Config.nodes('./layout/conversionPattern') as t(conversionPattern))

	DECLARE @ServerName SYSNAME, @DatabaseName SYSNAME, @SessionID INT
	SELECT @ServerName = ServerName, @DatabaseName = DatabaseName, @SessionID = SessionID
	FROM LoggerBase.Layout_Tokens_Pivot(@TokenValues)

	
	SELECT @FormattedMessage = COALESCE(@FormattedMessage + ',', '') + CONCAT('"', TokenProperty, '":"', LoggerBase.Layout_JsonEscape(TokenCurrentValue), '"')
	FROM LoggerBase.Util_Split(@ConversionPattern, '|') T
	--LEFT JOIN @TokenReplacements R ON T.Item = R.TokenElement
	LEFT JOIN LoggerBase.Layout_GetTokens(@LoggerName, @LogLevelName, @Message, @CorrelationId, @DatabaseName, @ServerName, @SessionId) R ON T.Item = R.Token

	SET @FormattedMessage = CONCAT('{', @FormattedMessage, '}')
	

GO
IF OBJECT_ID('LoggerBase.Config_Appenders_FilteredByLevel') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Config_Appenders_FilteredByLevel
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Config_Appenders_FilteredByLevel

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    Returns the appender configurations that still fire for the requested level.

    --TEST
	DECLARE @InfoConfig XML = '<log4mssql><appender name="Saved-Default-Console" type="LoggerBase.Appender_ConsoleAppender"><layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="%timestamp %level %logger-%message"/></layout></appender><root><level value="INFO"/><appender-ref ref="Saved-Default-Console"/></root></log4mssql>'
	DECLARE @RequestedLogLevelName VARCHAR(500) = 'DEBUG'

	EXEC LoggerBase.Config_Appenders_FilteredByLevel @Config = @InfoConfig, @RequestedLogLevelName = @RequestedLogLevelName, @Debug = 1

	DECLARE @DebugConfig XML = '<log4mssql><appender name="Saved-Default-Console" type="LoggerBase.Appender_ConsoleAppender"><layout type="LoggerBase.Layout_PatternLayout"><conversionPattern value="%timestamp %level %logger-%message"/></layout></appender><root><level value="DEBUG"/><appender-ref ref="Saved-Default-Console"/></root></log4mssql>'

	EXEC LoggerBase.Config_Appenders_FilteredByLevel @Config = @DebugConfig, @RequestedLogLevelName = @RequestedLogLevelName, @Debug = 1

**********************************************************************************************/

ALTER PROCEDURE [LoggerBase].[Config_Appenders_FilteredByLevel]
(
	 @Config                XML
	,@RequestedLogLevelName VARCHAR(500)
	,@Debug                 BIT = 0               
)

AS

    SET NOCOUNT ON

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@Config:', CONVERT(VARCHAR(5000), @Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@RequestedLogLevelName:', @RequestedLogLevelName)
		DECLARE @RowCount INT = (SELECT COUNT(*) FROM LoggerBase.Config_Root_Get(@Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:LoggerBase.Config_Root returned rowcount:', @RowCount)
		SET @RowCount = (SELECT COUNT(*) FROM LoggerBase.Config_Appenders_Get(@Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:LoggerBase.Config_Appenders_Get returned rowcount:', @RowCount)
	END

	DECLARE @LogLevelValue INT = (SELECT LogLevelValue FROM LoggerBase.Core_Level WHERE LogLevelName = @RequestedLogLevelName)

	IF (@LogLevelValue IS NULL) SELECT @LogLevelValue = MAX(LogLevelValue) FROM LoggerBase.Core_Level

	SELECT 
	ROW_NUMBER() OVER (ORDER BY A.AppenderName) AS RowID
	,A.AppenderType
	,A.AppenderConfig
	FROM       LoggerBase.Config_Root_Get     (@Config) R
	INNER JOIN LoggerBase.Config_Appenders_Get(@Config) A ON R.AppenderRef = A.AppenderName
	--Check if we have an override in the session that changes the root-appender defined logging level.
	--INNER JOIN LoggerBase.Core_Level                    LL ON COALESCE(LoggerBase.Session_Level_Get(),  R.LevelValue)  = LL.LogLevelName
	--AND LL.LogLevelValue <= (SELECT LogLevelValue FROM LoggerBase.Core_Level WHERE LogLevelName = @RequestedLogLevelName)
	INNER JOIN LoggerBase.Core_Level                    LL ON R.LevelValue  = LL.LogLevelName
	WHERE 1=1
	AND LL.LogLevelValue <= @LogLevelValue
	--AND LL.LogLevelValue <= (SELECT LogLevelValue FROM LoggerBase.Core_Level WHERE LogLevelName = @RequestedLogLevelName)
	AND AppenderName IN
	(
		SELECT AppenderName FROM LoggerBase.Appender_Filter_RangeFile_Apply(@Config, @RequestedLogLevelName) AS FilteredByRange
	)
	
GO


GO
IF OBJECT_ID('LoggerBase.Config_Retrieve') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Config_Retrieve
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Config_Retrieve

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    Returns the lowest-level config given the current state. 
					The order of preference is:
					*Passed in config XML
					*Saved config name
					*Session config
					*Saved default config
					*Hard-coded config

    --TEST

**********************************************************************************************/

ALTER PROCEDURE [LoggerBase].[Config_Retrieve]
(
	 @Override XML = NULL
	,@SavedConfigName VARCHAR(500) = NULL
    ,@Config XML OUTPUT
	,@Debug  BIT = 0
)

AS

    SET NOCOUNT ON

	IF (@Override IS NOT NULL) 
	BEGIN
		SET @Config = @Override
		RETURN
	END

	IF (@Config IS NULL)
	BEGIN
		SELECT @Config = ConfigXML FROM LoggerBase.Config_Saved WHERE ConfigName = @SavedConfigName
	END

	--IF (@Override IS NULL)
	--BEGIN 
	--	IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@Override is null calling LoggerBase.Config_RetrieveFromSession')
	--	SELECT @Config = LoggerBase.Config_RetrieveFromSession()
	--END

	IF (@Config IS NULL)
	BEGIN
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']: @Config is null. Getting "DEFAULT" from saved configuration.')
		SELECT @Config = ConfigXML FROM LoggerBase.Config_Saved WHERE ConfigName = 'DEFAULT'
	END

	IF (@Config IS NULL)
	BEGIN
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']: @Config is null. Assigning default string.')
		SELECT @Config = '<log4mssql>
		<appender name="Hard-Coded-Console" type="Logger.Appender_ConsoleAppender">
			<layout type="Logger.Layout_PatternLayout">
				<conversionPattern value="%timestamp %level %logger-%message" />
			</layout>
		</appender>
		   <root>
			<level value="DEBUG" />
			<appender-ref ref="Hard-Coded-Console" />
		</root>
	</log4mssql>'
	END

GO


GO
IF OBJECT_ID('LoggerBase.Config_Saved_Set') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Config_Saved_Set
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Config_Saved_Set

    Date:           02/08/2019
    Author:         Jerome Pion
    Description:    Upsert the XML definition of a saved config in LoggerBase.Config_Saved.

    --TEST

**********************************************************************************************/

ALTER PROCEDURE [LoggerBase].[Config_Saved_Set]
(
	 @ConfigName VARCHAR(500)
    ,@Config XML 
	,@Debug  BIT = 0
)

AS
BEGIN
    SET NOCOUNT ON

	IF (@ConfigName IS NULL OR RTRIM(@ConfigName) = '')
	BEGIN
		PRINT '[LoggerBase.Config_Saved_Set]: @ConfigName cannot be null or empty'
		RETURN -1
	END

	IF (@Config IS NULL)
	BEGIN
		PRINT '[LoggerBase.Config_Saved_Set]: @Config cannot be null'
		RETURN -2
	END

	IF NOT EXISTS (SELECT * FROM LoggerBase.Config_Saved WHERE ConfigName = @ConfigName)
	BEGIN
		INSERT INTO LoggerBase.Config_Saved
		(ConfigName, ConfigXML)
		VALUES (@ConfigName, @Config)
	END
	ELSE
	BEGIN
		UPDATE LoggerBase.Config_Saved
		SET ConfigXML = @Config
		WHERE 1=1
		AND ConfigName = @ConfigName
	END

	RETURN 0

END
GO


GO
IF OBJECT_ID('LoggerBase.Layout_FormatMessage') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Layout_FormatMessage
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO
/*********************************************************************************************

    PROCEDURE LoggerBase.Layout_FormatMessage

    Date:           07/14/2017
    Author:         Jerome Pion
    Description:    Execute the request layout and return the formatted message.

    --TEST
	DECLARE 
	  @LayoutTypeName   SYSNAME
    , @LoggerName       VARCHAR(500)
	, @LogLevelName     VARCHAR(500)
	, @Message          VARCHAR(MAX)
	, @LayoutConfig     XML
	, @Debug            BIT
    , @FormattedMessage VARCHAR(MAX)
	, @TokenValues      LoggerBase.TokenValues

	INSERT INTO @TokenValues(ServerName, DatabaseName, SessionId) VALUES ('AServer', 'ADatabase', '1234')

	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = 'LoggerBase.Layout_PatternLayout'
		, @LoggerName      = 'LoggerName'
		, @LogLevelName    = 'DEBUG'
		, @Message         = 'A test message'
		, @LayoutConfig    = '<layout type="Logger.Layout_PatternLayout"><conversionPattern value="[%timestamp] [%thread] %level - %logger - %message %dbname %server"/></layout>'
		, @Debug           = 1
		, @FormattedMessage = @FormattedMessage OUTPUT
		, @TokenValues     = @TokenValues

	SELECT @FormattedMessage

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Layout_FormatMessage
(
	  @LayoutTypeName   SYSNAME
    , @LoggerName       VARCHAR(500)
	, @LogLevelName     VARCHAR(500)
	, @CorrelationId    VARCHAR(50) = NULL
	, @Message          VARCHAR(MAX)
	, @LayoutConfig     XML
	, @Debug            BIT
	, @TokenValues      VARCHAR(MAX)
	, @FormattedMessage VARCHAR(MAX) OUTPUT
)

AS

    SET NOCOUNT ON
	
	DECLARE @SQL NVARCHAR(MAX) = CONCAT(@LayoutTypeName, ' @LoggerName, @LogLevelName, @Message, @Config, @Debug, @CorrelationId, @TokenValues, @FormattedMessage OUTPUT')

	IF (@Debug = 1) 
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@SQL:', @SQL)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@CorrelationId:', @CorrelationId)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LayoutConfig:', CONVERT(VARCHAR(MAX), @LayoutConfig))
	END

	EXECUTE sp_executesql @SQL, N'@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @Debug BIT, @CorrelationId VARCHAR(50), @TokenValues VARCHAR(MAX), @FormattedMessage VARCHAR(MAX) OUTPUT'
	,@LoggerName       = @LoggerName
	,@LogLevelName     = @LogLevelName
	,@Message          = @Message
	,@Config           = @LayoutConfig
	,@Debug            = @Debug
	,@CorrelationId    = @CorrelationId
	,@TokenValues      = @TokenValues
	,@FormattedMessage = @FormattedMessage OUTPUT
	

GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
END
GO

IF (OBJECT_ID('LoggerBase.Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery') IS NOT NULL AND ServerProperty('EngineEdition') <> 5) 
SET NOEXEC ON
GO

CREATE  PROCEDURE [LoggerBase].[Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery]
(
	@ConnectionString NVARCHAR(4000),
	@Query NVARCHAR(4000),
	@Parameters XML,
	@CommandTimeout INT = 5,
	@Debug BIT = 0
)
WITH EXECUTE AS CALLER
AS
EXTERNAL NAME [log4mssql].[StoredProcedures].[LoggerBase_Exec_Non_Transacted_Query]

GO

IF ServerProperty('EngineEdition') <> 5 SET NOEXEC OFF
GO
ALTER PROCEDURE [LoggerBase].[Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery]
(
	@ConnectionString NVARCHAR(4000),
	@Query NVARCHAR(4000),
	@Parameters XML,
	@CommandTimeout INT = 5,
	@Debug BIT = 0
)
WITH EXECUTE AS CALLER
AS
EXTERNAL NAME [log4mssql].[StoredProcedures].[LoggerBase_Exec_Non_Transacted_Query]
GO
IF OBJECT_ID('LoggerBase.Appender_ConsoleAppender') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_ConsoleAppender
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO
/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_ConsoleAppender

    Date:           07/14/2017
    Author:         Jerome Pion
    Description:    Invokes the requested appender using the provided XML configuration.

    --TEST
	DECLARE @LoggerName   VARCHAR(500) = 'TestAppenderLoggerBase'
	DECLARE @LogLevelName VARCHAR(500) = 'DEBUG'
	DECLARE @Message      VARCHAR(MAX) = 'Appender test message!'
	DECLARE @TokenValues  LoggerBase.TokenValues
	DECLARE @CorrelationId VARCHAR(20) = '1234-F'
	INSERT INTO @TokenValues (ServerName, DatabaseName, SessionId) VALUES ('ADb', 'AServer', 20)
	DECLARE @Config       XML          = '<appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
	<!-- A1 uses PatternLayout -->
	<layout type="LoggerBase.Layout_PatternLayout">
	<conversionPattern value="%timestamp [%thread] %level %LoggerBase - %message%newline"/>
	</layout>
	</appender>'

	EXEC LoggerBase.Appender_ConsoleAppender 
	  @LoggerName   = @LoggerName
	, @LogLevelName = @LogLevelName 
	, @Message      = @Message
	, @Config       = @Config
	, @TokenValues  = @TokenValues
	, @CorrelationId = @CorrelationId
	, @Debug        = 1

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Appender_ConsoleAppender (@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @CorrelationId VARCHAR(50), @Debug BIT=0, @TokenValues VARCHAR(MAX))
AS
	
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Message:', @Message)

	DECLARE @FormattedMessage VARCHAR(MAX)
	DECLARE @LayoutType       SYSNAME
	DECLARE @LayoutConfig     XML
	DECLARE @SQL              NVARCHAR(MAX)

	SELECT @LayoutType = LayoutType, @LayoutConfig = LayoutConfig FROM LoggerBase.Config_Layout(@Config)

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Config:'    , CONVERT(VARCHAR(MAX), @Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LayoutType:', @LayoutType)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@SQL:'       , @SQL)
	END

	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutType
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @CorrelationId   = @CorrelationId
		, @Debug           = @Debug
		, @TokenValues     = @TokenValues
		, @FormattedMessage = @FormattedMessage OUTPUT

	PRINT @FormattedMessage

GO
GO
IF OBJECT_ID('LoggerBase.Appender_FileAppender') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_FileAppender
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_FileAppender

    Date:           12/29/2017
    Author:         Jerome Pion
    Description:    Writes to a text file.

    --TEST
	DECLARE @LoggerName VARCHAR(500) = 'TestAppenderLogger'
	DECLARE @LogLevelName VARCHAR(500) = 'DEBUG'
	DECLARE @Message VARCHAR(MAX) = 'Appender test message!'
	DECLARE @XMLConfig XML = '<appender name="FileAppender" type="LoggerBase.Appender_FileAppender">
		<file value="C:\TEMP\log-file_%dbname_%date.txt" />
		<appendToFile value="true" />
		<layout type="LoggerBase.Layout_PatternLayout">
			<conversionPattern value="%date [%thread] %level %logger - %message%newline" />
		</layout>
		<fileNameHasTokens value="true" />
</appender>'

	EXEC LoggerBase.Appender_FileAppender 
	  @LoggerName = @LoggerName
	, @LogLevelName = @LogLevelName 
	, @Message      = @Message
	, @Config       = @XMLConfig
	, @CorrelationID = 'ABC-123'
	, @Debug        = 1

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Appender_FileAppender (@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @CorrelationId VARCHAR(50), @Debug BIT=0, @TokenValues VARCHAR(MAX))
AS
	
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Message:', @Message)

	DECLARE @FormattedMessage VARCHAR(MAX)
	DECLARE @LayoutType       SYSNAME
	DECLARE @LayoutConfig     XML
	DECLARE @SQL              NVARCHAR(MAX)
	DECLARE @FileName         NVARCHAR(4000)
	DECLARE @AppendToFile     BIT
	DECLARE @FileNameHasTokens BIT
	DECLARE @ServerName       SYSNAME
	DECLARE @DatabaseName     SYSNAME
	DECLARE @SessionID        INT

	SELECT @LayoutType = LayoutType, @LayoutConfig = LayoutConfig FROM LoggerBase.Config_Layout(@Config)

	SELECT @FileName = t.appender.value('(./file/@value)[1]', 'nvarchar(4000)')
	,@AppendToFile = t.appender.value('(./appendToFile/@value)[1]', 'bit')
	,@FileNameHasTokens = t.appender.value('(./fileNameHasTokens/@value)[1]', 'bit')
	FROM @Config.nodes('./appender') as t(appender)

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Config:'    , CONVERT(VARCHAR(MAX), @Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LayoutType:', @LayoutType)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FileName (From Configuration):',     @FileName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@AppendToFile:', @AppendToFile)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FileNameHasTokens:', @FileNameHasTokens)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@SQL:'       , @SQL)
	END

	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutType
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @CorrelationId   = @CorrelationId
		, @Debug           = @Debug
		, @TokenValues     = @TokenValues
		, @FormattedMessage = @FormattedMessage OUTPUT

	IF (@FileNameHasTokens = 1)
	BEGIN
		SELECT @ServerName = ServerName, @DatabaseName = DatabaseName, @SessionID = @SessionID
		FROM LoggerBase.Layout_Tokens_Pivot(@TokenValues)
		SELECT @FileName = LoggerBase.Layout_ReplaceTokens('', @FileName, @LoggerName, @LogLevelName, @CorrelationId, @ServerName, @DatabaseName, @SessionID) 
	END

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FileName (Appender):'       , @FileName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FormattedMessage:'       , @FormattedMessage)
	END
	DECLARE 	 
	 @text   NVARCHAR(4000) = @FormattedMessage
	,@path   NVARCHAR(4000) = @FileName
	,@append BIT = @AppendToFile
	,@exitCode INT 
	,@errorMessage NVARCHAR(4000) 

	EXEC LoggerBase.Appender_File_Private_WriteTextFile 
	@text = @text
	,@path = @path
	,@append = @append
	,@exitCode = @exitCode OUTPUT
	,@errorMessage = @errorMessage OUTPUT

	IF (COALESCE(@errorMessage,'') <> '')
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:Error in appender ', @errorMessage)
	END

GO
GO
IF OBJECT_ID('LoggerBase.Appender_FileAppender_MinimalLock') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_FileAppender_MinimalLock
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_FileAppender_MinialLock

    Date:           02/22/2019
    Author:         Jerome Pion
    Description:    Writes to a text file using a mutex to protect for shared writes.

    --TEST
	DECLARE @LoggerName VARCHAR(500) = 'TestAppenderLogger'
	DECLARE @LogLevelName VARCHAR(500) = 'DEBUG'
	DECLARE @Message VARCHAR(MAX) = 'Appender test message!'
	DECLARE @XMLConfig XML = '<appender name="FileAppender" type="LoggerBase.Appender_FileAppender">
		<file value="C:\TEMP\log-file_%dbname_%date.txt" />
		<appendToFile value="true" />
		<layout type="LoggerBase.Layout_PatternLayout">
			<conversionPattern value="%date [%thread] %level %logger - %message%newline" />
		</layout>
		<fileNameHasTokens value="true" />
</appender>'

	EXEC LoggerBase.Appender_FileAppender_MinimalLock
	  @LoggerName = @LoggerName
	, @LogLevelName = @LogLevelName 
	, @Message      = @Message
	, @Config       = @XMLConfig
	, @CorrelationID = 'ABC-123'
	, @Debug        = 1

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Appender_FileAppender_MinimalLock (@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @CorrelationId VARCHAR(50), @Debug BIT=0, @TokenValues VARCHAR(MAX))
AS
	
	SET NOCOUNT ON

	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Message:', @Message)

	DECLARE @FormattedMessage VARCHAR(MAX)
	DECLARE @LayoutType       SYSNAME
	DECLARE @LayoutConfig     XML
	DECLARE @SQL              NVARCHAR(MAX)
	DECLARE @FileName         NVARCHAR(4000)
	DECLARE @AppendToFile     BIT
	DECLARE @FileNameHasTokens BIT
	DECLARE @ServerName       SYSNAME
	DECLARE @DatabaseName     SYSNAME
	DECLARE @SessionID        INT

	SELECT @LayoutType = LayoutType, @LayoutConfig = LayoutConfig FROM LoggerBase.Config_Layout(@Config)

	SELECT @FileName = t.appender.value('(./file/@value)[1]', 'nvarchar(4000)')
	,@AppendToFile = t.appender.value('(./appendToFile/@value)[1]', 'bit')
	,@FileNameHasTokens = t.appender.value('(./fileNameHasTokens/@value)[1]', 'bit')
	FROM @Config.nodes('./appender') as t(appender)

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@Config:'    , CONVERT(VARCHAR(MAX), @Config))
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LoggerName:', @LoggerName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@LayoutType:', @LayoutType)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FileName (From Configuration):',     @FileName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@AppendToFile:', @AppendToFile)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FileNameHasTokens:', @FileNameHasTokens)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@SQL:'       , @SQL)
	END

	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutType
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @CorrelationId   = @CorrelationId
		, @Debug           = @Debug
		, @TokenValues     = @TokenValues
		, @FormattedMessage = @FormattedMessage OUTPUT

	IF (@FileNameHasTokens = 1)
	BEGIN
		SELECT @ServerName = ServerName, @DatabaseName = DatabaseName, @SessionID = @SessionID
		FROM LoggerBase.Layout_Tokens_Pivot(@TokenValues)
		SELECT @FileName = LoggerBase.Layout_ReplaceTokens('', @FileName, @LoggerName, @LogLevelName, @CorrelationId, @ServerName, @DatabaseName, @SessionID) 
	END

	IF (@Debug = 1)
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FileName (Appender):'       , @FileName)
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:@FormattedMessage:'       , @FormattedMessage)
	END
	DECLARE 	 
	 @text   NVARCHAR(4000) = @FormattedMessage
	,@path   NVARCHAR(4000) = @FileName
	,@append BIT = @AppendToFile
	,@exitCode INT 
	,@errorMessage NVARCHAR(4000) 

	DECLARE @MutexName NVARCHAR(4000) = LoggerBase.Appender_MutexName()

	EXEC LoggerBase.Appender_File_Private_WriteTextFileWithMutex 
	@text = @text
	,@path = @path
	,@append = @append
	,@mutexname = @MutexName
	,@exitCode = @exitCode OUTPUT
	,@errorMessage = @errorMessage OUTPUT

	IF (COALESCE(@errorMessage,'') <> '')
	BEGIN
		PRINT CONCAT('[',OBJECT_NAME(@@PROCID),']:Error in appender ', @errorMessage)
	END

GO
GO
IF ServerProperty('EngineEdition') = 5
BEGIN
	DECLARE @Message NVARCHAR(MAX);SELECT @Message = CONCAT(CONVERT(NVARCHAR,GETDATE(),121),':LoggerBase.Appender_MSSQLDatabaseAppender requires CLR with external access which is not supported in Azure. This appendeder will not be available.'); RAISERROR(@Message,0,1);
END
GO

IF (OBJECT_ID('LoggerBase.Appender_MSSQLDatabaseAppender') IS NOT NULL AND ServerProperty('EngineEdition') <> 5) 
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_MSSQLDatabaseAppender
AS
	PRINT 'Stub only'
GO

IF ServerProperty('EngineEdition') <> 5 SET NOEXEC OFF
GO
/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_MSSQLDatabaseAppender
   
    Property of Clearent, LLC
    Date:           07/07/2017
    Author:         Jerome Pion
    Description:    Writes logging entries to database without enlisting in a transaction.

	/*jpion: 2017-07-29: Changed name to reflect that tacking "Enlist=false" to the connection string may only work for MSSQL Server*/
    --TEST

	DECLARE @Config XML = 
'<appender name="MSSQLAppender" type="LoggerBase.Appender_MSSQLDatabaseAppender">
	<connectionString value="data source=localhost;initial catalog=LoggerTest;integrated security=true;" />
    <commandText value="INSERT INTO LoggerBase.TestLog ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%date" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@thread" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%thread" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@log_level" />
        <dbType value="VarChar" />
	   <size value="50" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%level" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@logger" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%logger" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@message" />
        <dbType value="VarChar" />
	   <size value="4000" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%message" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@exception" />
        <dbType value="VarChar" />
	   <size value="2000" />
        <layout type="LoggerBase.Layout_PatternLayout" />
    </parameter>
</appender>'

IF OBJECT_ID('LoggerBase.TestLog') IS NOT NULL DROP TABLE LoggerBase.TestLog
CREATE TABLE LoggerBase.TestLog
(
	[Date] DATE
	,[Thread] INT
	,[Level] VARCHAR(500)
	,[Logger] VARCHAR(500)
	,[Message] VARCHAR(MAX)
	,[Exception] VARCHAR(MAX)
)

EXEC LoggerBase.Appender_MSSQLDatabaseAppender @LoggerName = 'TestLogger', @LogLevelName = 'DEBUG', @Message = 'This is a test.', @Config = @Config
, @Debug = 1
SELECT * FROM LoggerBase.TestLog

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Appender_MSSQLDatabaseAppender
(@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @CorrelationId VARCHAR(50), @Debug BIT=0)
AS
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),':@Message:', @Message)
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),':@Config:', CONVERT(VARCHAR(MAX),@Config))

	--Get command text
	DECLARE @CommandText VARCHAR(MAX)
	DECLARE @ConnectionString VARCHAR(MAX)

	SELECT @CommandText = t.commandText.value('./@value', 'varchar(MAX)') 
	FROM @Config.nodes('/appender/commandText') as t(commandText)

	SELECT @ConnectionString = t.connectionString.value('./@value', 'varchar(MAX)') 
	FROM @Config.nodes('/appender/connectionString') as t(connectionString)
	--Loop through parameters. 

	SET @ConnectionString = CONCAT(@ConnectionString, ';Enlist=false;')

	SELECT 
	ROW_NUMBER() OVER (ORDER BY t.parameter.value('(parameterName/@value)[1]', 'varchar(MAX)')) AS RowID
	,t.parameter.value('(parameterName/@value)[1]', 'varchar(MAX)') AS ParameterName
	,t.parameter.value('(dbType/@value)[1]', 'varchar(MAX)') AS dbType
	,t.parameter.value('(size/@value)[1]', 'varchar(MAX)') AS size
	,t.parameter.value('(layout/@type)[1]', 'varchar(MAX)') AS LayoutType
	,t.parameter.value('(layout/conversionPattern/@value)[1]', 'varchar(MAX)') AS ConversionPattern
	,t.parameter.query('./layout') AS ParameterXML
	,CAST('' AS VARCHAR(MAX)) AS ParameterValue
	INTO #Parameters
	FROM @Config.nodes('/appender/parameter') as t(parameter)
		--Get parameter name and datatype
			--Use layout to get value.
			select * from #Parameters
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@CommandText:', @CommandText)

	DECLARE @Counter INT
	DECLARE @Limit INT
	DECLARE @SQL NVARCHAR(MAX)

	DECLARE @LayoutTypeName SYSNAME
	DECLARE @LayoutConfig XML
	DECLARE @FormattedMessage VARCHAR(MAX)

	SELECT @Counter = MIN(RowID), @Limit = MAX(RowID)
	FROM #Parameters

	WHILE (@Counter <= @Limit)
	BEGIN
		SELECT @LayoutTypeName = LayoutType
		,@LayoutConfig = ParameterXML
		FROM #Parameters
		WHERE 1=1
		AND RowID = @Counter

	 	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutTypeName
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @CorrelationId   = @CorrelationId
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @Debug           = @Debug
		, @FormattedMessage = @FormattedMessage OUTPUT

	  UPDATE #Parameters SET ParameterValue = @FormattedMessage
	  WHERE 1=1
	  AND RowID = @Counter

		SET @Counter += 1

		IF (@Debug = 1)
		BEGIN
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LayoutTypeName:', @LayoutTypeName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LoggerName:', @LoggerName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LogLevelName:', @LogLevelName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@Message:', @Message)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LayoutConfig:', CONVERT(VARCHAR(MAX), @LayoutConfig))
		END
	END

	--SELECT * FROM #Parameters

	--Take the parameters and construct the parameters definition and parameters/value list
	DECLARE @ParameterDefinition NVARCHAR(MAX)
	SELECT @ParameterDefinition = COALESCE(@ParameterDefinition+',' ,'') + CONCAT(ParameterName, ' ' , dbType, ' = ''', ParameterValue, '''')
	FROM #Parameters

--SELECT @SQL = CONCAT('DECLARE ', @ParameterDefinition, '; ', @CommandText)
IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@SQL:', @CommandText)
--BEGIN
----EXEC (@SQL)
--	--EXEC LoggerBase.Appender_MSSQLDatabaseAppender_ExecNonTransactedQuery
--	-- @connectionstring = @ConnectionString
--	--,@query = @SQL
--END
--SELECT 1 AS Tag
--,NULL AS Parent
--,NULL AS [Parameters!1!ParameterName]
--,NULL AS [Parameter!2!DBType]
--,NULL AS [Parameter!2!!CData]
--UNION ALL
--select 2 AS Tag
--,1 AS Parent
--,ParameterName  
--,DBType         
--,ParameterValue
-- FROM #Parameters 
-- FOR XML EXPLICIT;

DECLARE @ParametersXML xml

SET @ParametersXML = (
	SELECT *
	FROM
	(
	SELECT 1        AS Tag
	,NULL           AS Parent
	,NULL           AS [Parameters!1!ParameterName]
	,NULL		 AS [Parameter!2!ParameterName]
	,NULL           AS [Parameter!2!DBType]
	,NULL           AS [Parameter!2!Size]
	,NULL           AS [Parameter!2!!CData]
	UNION ALL
    SELECT 
     2              AS Tag
    ,1              AS Parent
    ,ParameterName  AS [Parameter!2!ParameterName]
    ,ParameterName  AS [Parameter!2!ParameterName]
    ,DBType         AS [Parameter!2!DBType]
    ,Size           AS [Parameter!2!Size]
    ,ParameterValue AS [Parameter!2!!CData]
    FROM #Parameters
	) AS N
    FOR XML EXPLICIT
	--FOR XML PATH('Parameter'), ROOT('Parameters')
 )

 --print CONCAT('@ParametersXML ', CONVERT(VARCHAR(8000), @ParametersXML))
 IF (@Debug = 1) PRINT CONCAT('@ParametersXML ', CONVERT(VARCHAR(8000), @ParametersXML))
 ----EXEC (@SQL)
EXEC [LoggerBase].[Appender_MSSQLSQLDatabaseAppender_ExecNonTransactedQuery]
	 @ConnectionString = @ConnectionString
	,@Query            = @CommandText
	,@Parameters       = @ParametersXML
	,@CommandTimeout   = 5
	,@Debug            = @Debug 
GO
IF OBJECT_ID('LoggerBase.Appender_LocalDatabaseAppender') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE LoggerBase.Appender_LocalDatabaseAppender
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Appender_LocalDatabaseAppender

    Date:           11/30/2017
    Author:         Jerome Pion
    Description:    Writes logging entries to the local database within the in-scope transaction.

    --TEST

	DECLARE @Config XML = 
'<appender name="MSSQLAppender" type="LoggerBase.Appender_LocalDatabaseAppender">
    <commandText value="INSERT INTO LoggerBase.TestLog ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%date" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@thread" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%thread" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@log_level" />
        <dbType value="VarChar" />
	   <size value="50" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%level" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@logger" />
        <dbType value="VarChar" />
	   <size value="255" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%logger" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@message" />
        <dbType value="VarChar" />
	   <size value="4000" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%message" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@exception" />
        <dbType value="VarChar" />
	   <size value="2000" />
        <layout type="LoggerBase.Layout_PatternLayout" />
    </parameter>
</appender>'

IF OBJECT_ID('LoggerBase.TestLog') IS NOT NULL DROP TABLE LoggerBase.TestLog
CREATE TABLE LoggerBase.TestLog
(
	[Date] DATE
	,[Thread] INT
	,[Level] VARCHAR(500)
	,[Logger] VARCHAR(500)
	,[Message] VARCHAR(MAX)
	,[Exception] VARCHAR(MAX)
)

EXEC LoggerBase.Appender_LocalDatabaseAppender @LoggerName = 'TestLogger', @LogLevelName = 'DEBUG', @Message = 'This is a test.', @Config = @Config
, @Debug = 1
SELECT * FROM LoggerBase.TestLog

--Check for extra quotes.
EXEC LoggerBase.Appender_LocalDatabaseAppender @LoggerName = 'TestLogger', @LogLevelName = 'DEBUG', @Message = 'This ''is a test.', @Config = @Config
, @Debug = 1
SELECT * FROM LoggerBase.TestLog

**********************************************************************************************/

ALTER PROCEDURE LoggerBase.Appender_LocalDatabaseAppender
(@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @CorrelationId VARCHAR(50), @Debug BIT=0)
AS
	SET NOCOUNT ON

	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),':@Message:', @Message)
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID),':@Config:', CONVERT(VARCHAR(MAX),@Config))

	--Get command text
	DECLARE @CommandText VARCHAR(MAX)

	SELECT @CommandText = t.commandText.value('./@value', 'varchar(MAX)') 
	FROM @Config.nodes('/appender/commandText') as t(commandText)

	--Loop through parameters. 

	SELECT 
	ROW_NUMBER() OVER (ORDER BY t.parameter.value('(parameterName/@value)[1]', 'varchar(MAX)')) AS RowID
	,t.parameter.value('(parameterName/@value)[1]', 'varchar(MAX)') AS ParameterName
	,t.parameter.value('(dbType/@value)[1]', 'varchar(MAX)') AS dbType
	,t.parameter.value('(size/@value)[1]', 'varchar(MAX)') AS size
	,t.parameter.value('(layout/@type)[1]', 'varchar(MAX)') AS LayoutType
	,t.parameter.value('(layout/conversionPattern/@value)[1]', 'varchar(MAX)') AS ConversionPattern
	,t.parameter.query('./layout') AS ParameterXML
	,CAST('' AS VARCHAR(MAX)) AS ParameterValue
	INTO #Parameters
	FROM @Config.nodes('/appender/parameter') as t(parameter)
		--Get parameter name and datatype
			--Use layout to get value.
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@CommandText:', @CommandText)

	DECLARE @Counter INT
	DECLARE @Limit INT
	DECLARE @SQL NVARCHAR(MAX)

	DECLARE @LayoutTypeName SYSNAME
	DECLARE @LayoutConfig XML
	DECLARE @FormattedMessage VARCHAR(MAX)

	SELECT @Counter = MIN(RowID), @Limit = MAX(RowID)
	FROM #Parameters

	WHILE (@Counter <= @Limit)
	BEGIN
		SELECT @LayoutTypeName = LayoutType
		,@LayoutConfig = ParameterXML
		FROM #Parameters
		WHERE 1=1
		AND RowID = @Counter

	 	EXEC LoggerBase.Layout_FormatMessage 
		  @LayoutTypeName  = @LayoutTypeName
		, @LoggerName      = @LoggerName
		, @LogLevelName    = @LogLevelName
		, @CorrelationId   = @CorrelationId
		, @Message         = @Message
		, @LayoutConfig    = @LayoutConfig
		, @Debug           = @Debug
		, @FormattedMessage = @FormattedMessage OUTPUT

	  UPDATE #Parameters SET ParameterValue = @FormattedMessage
	  WHERE 1=1
	  AND RowID = @Counter

		SET @Counter += 1

		IF (@Debug = 1)
		BEGIN
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LayoutTypeName:', @LayoutTypeName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LoggerName:', @LoggerName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LogLevelName:', @LogLevelName)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@Message:', @Message)
			PRINT CONCAT('[',OBJECT_NAME(@@PROCID), ']:@LayoutConfig:', CONVERT(VARCHAR(MAX), @LayoutConfig))
		END
	END

	--SELECT * FROM #Parameters

	--Take the parameters and construct the parameters definition and parameters/value list
	DECLARE @ParameterDefinition NVARCHAR(MAX)
	SELECT @ParameterDefinition = COALESCE(@ParameterDefinition+',' ,'') + CONCAT(ParameterName, ' ' , dbType, IIF(size IS NOT NULL, CONCAT('(', size, ')'), ''), ' = ''', REPLACE(ParameterValue,'''',''''''), '''')
	FROM #Parameters

	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@SQL:', @CommandText)

	SELECT @SQL = CONCAT('DECLARE ', @ParameterDefinition, '; ', @CommandText)
	IF (@Debug = 1) PRINT CONCAT(OBJECT_NAME(@@PROCID), ':@SQL:', @SQL)
	EXEC (@SQL)
GO
IF OBJECT_ID('LoggerBase.Logger_Base') IS NOT NULL
DROP PROCEDURE [LoggerBase].[Logger_Base]
GO

/*********************************************************************************************

    PROCEDURE LoggerBase.Logger_Base

    Date:           07/12/2017
    Author:         Jerome Pion
    Description:    A base logging SP that other level-specific loggers will use, e.g. Logger.Debug

    --TEST
	DECLARE @Config XML = 
'<log4mssql>
    <!-- A1 is set to be a ConsoleAppender -->
    <appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A1 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="****TEST RESULT****%timestamp [%thread] %level %logger - %message" />
        </layout>
    </appender>
    
	<appender name="A2" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A2 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="****TEST RESULT****%timestamp [%thread] %level %logger - %message" />
        </layout>
    </appender>

<appender name="MSSQLAppender" type="LoggerBase.Appender_MSSQLAppender">
    <commandText value="INSERT INTO LoggerBase.TestLog ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="LoggerBase.Layout_RawTimeStampLayout" />
    </parameter>
    <parameter>
        <parameterName value="@thread" />
        <dbType value="varchar(255)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%thread" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@log_level" />
        <dbType value="varchar(50)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%level" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@logger" />
        <dbType value="varchar(255)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%logger" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@message" />
        <dbType value="varchar(4000)" />
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="%message" />
        </layout>
    </parameter>
    <parameter>
        <parameterName value="@exception" />
        <dbType value="varchar(2000)" />
        <layout type="LoggerBase.Layout_PatternLayout" />
    </parameter>
</appender>

    <!-- Set root logger level to DEBUG and its only appenders to A1, A2, MSSQLAppender -->
    <root>
        <level value="DEBUG" />
        <appender-ref ref="A1" />
		<appender-ref ref="A2" />
    </root>

	<!--For the "TestProcedure" logger set the level of its "A2" appender to INFO -->
	<logger name="TestProcedure">
		<level value="INFO" />
		<appender-ref ref="A2" />
	</logger>
	<logger name="TestProcedure2">
		<level value="INFO" />
		<appender-ref ref="A2" />
	</logger>
</log4mssql>'

DECLARE @RequestedLogLevelName VARCHAR(100) = 'DEBUG'
DECLARE @LoggerName VARCHAR(500) = 'JustATestLogger'

EXEC LoggerBase.Logger_Base 
  @Message               = 'Some message.'
, @LoggerName            = @LoggerName
, @Config                = @Config
, @RequestedLogLevelName = 'DEBUG'
, @Debug                 = 1

EXEC LoggerBase.Logger_Base 
  @Message               = 'Some message.'
, @LoggerName            = 'DefaultConfigLogger'
, @RequestedLogLevelName = 'DEBUG'
, @Debug                 = 1

EXEC LoggerBase.Logger_Base 
  @Message               = 'Some message.'
, @LoggerName            = 'DefaultConfigLogger'
, @RequestedLogLevelName = 'INFO'
, @Debug                 = 1

DECLARE @TokenValues LoggerBase.TokenValues
, @TestConfig XML = 
'<log4mssql>
    <!-- A1 is set to be a ConsoleAppender -->
    <appender name="A1" type="LoggerBase.Appender_ConsoleAppender">
 
        <!-- A1 uses PatternLayout -->
        <layout type="LoggerBase.Layout_PatternLayout">
            <conversionPattern value="****TEST RESULT****%timestamp [%thread] %level %logger - %message %dbname" />
        </layout>
    </appender>
	
	
    <!-- Set root logger level to DEBUG and its only appenders to A1, A2, MSSQLAppender -->
    <root>
        <level value="DEBUG" />
        <appender-ref ref="A1" />
    </root>
</log4mssql>'

INSERT INTO @TokenValues (ServerName, DatabaseName, SessionId) VALUES ('MyServer', 'MyDatabase', '1234')

EXEC LoggerBase.Logger_Base 
  @Message               = 'Some message.'
, @LoggerName            = 'DefaultConfigLogger'
, @RequestedLogLevelName = 'INFO'
, @Config                = @TestConfig
, @Debug                 = 1
, @TokenValues           = @TokenValues

**********************************************************************************************/

CREATE PROCEDURE [LoggerBase].[Logger_Base] 
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500)
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @RequestedLogLevelName VARCHAR(100)
	, @LogConfiguration      LogConfiguration = NULL
	, @CorrelationId         VARCHAR(50) = NULL
	, @Debug                 BIT = 0
	, @TokenValues           VARCHAR(MAX)
)

AS

    SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	BEGIN TRY
		SELECT 
		 @LoggerName       = COALESCE(@LoggerName, C.ConfigurationPropertyValue)
		FROM LoggerBase.Configuration_Get_Properties(@LogConfiguration) C
		WHERE 1=1
		AND C.ConfigurationPropertyName = 'LoggerName'

		SELECT 
		 @StoredConfigName = RTRIM(COALESCE(@StoredConfigName, C.ConfigurationPropertyValue))
		FROM LoggerBase.Configuration_Get_Properties(@LogConfiguration) C
		WHERE 1=1
		AND C.ConfigurationPropertyName = 'SavedConfigurationName'

		SELECT 
		 @Config           = COALESCE(@Config, IIF(RTRIM(C.ConfigurationPropertyValue) = '', NULL, C.ConfigurationPropertyValue))
		FROM LoggerBase.Configuration_Get_Properties(@LogConfiguration) C
		WHERE 1=1
		AND C.ConfigurationPropertyName = 'ConfigurationXml'

		SELECT 
		 @CorrelationId    = COALESCE(@CorrelationId, IIF(RTRIM(C.ConfigurationPropertyValue) = '', NULL, C.ConfigurationPropertyValue))
		FROM LoggerBase.Configuration_Get_Properties(@LogConfiguration) C
		WHERE 1=1
		AND C.ConfigurationPropertyName = 'CorrelationId'

		IF (RTRIM(@LoggerName) = '') SET @LoggerName = 'NoLogNameSupplied'
		IF (RTRIM(@CorrelationId) = '') SET @CorrelationId = Logger.CorrelationId()

		--TODO: Normalize out get by config name
		IF (@Config IS NULL) 
		BEGIN
			IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:Retrieving StoredConfig, "', @StoredConfigName, '" from LoggerBase.Config_Saved.')
			--SELECT @Config = ConfigXML FROM LoggerBase.Config_Saved WHERE ConfigName = @StoredConfigName
			EXEC LoggerBase.Config_Retrieve @Override = NULL, @SavedConfigName = @StoredConfigName, @Config = @Config OUTPUT, @Debug = @Debug
			DECLARE @RowCount INT = @@ROWCOUNT
			IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']: ', @RowCount, ' row(s) returned from LoggerBase.Config_Retrieve.')
		END
		--EXEC LoggerBase.Config_Retrieve @Override = @Config, @Config = @PrivateConfig OUTPUT, @Debug = @Debug

		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@Config:               ', CONVERT(VARCHAR(MAX), @Config))
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@StoredConfigName:     "', CONVERT(VARCHAR(MAX), @StoredConfigName), '"')
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@RequestedLogLevelName:"', CONVERT(VARCHAR(MAX), @RequestedLogLevelName), '"')
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@CorrelationId:"        ', CONVERT(VARCHAR(MAX), @CorrelationId), '"')

		DECLARE @Appenders TABLE
		(
			RowID INT
			,AppenderType SYSNAME
			,AppenderConfig XML
		)
		INSERT INTO @Appenders
		EXEC LoggerBase.Config_Appenders_FilteredByLevel
			 @Config                = @Config--@PrivateConfig           
			,@RequestedLogLevelName = @RequestedLogLevelName
			,@Debug                 = @Debug
		SET @RowCount = @@ROWCOUNT
		IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:Found ', @RowCount, ' appenders.')

		DECLARE @Counter INT
		DECLARE @Limit   INT
		DECLARE @SQL     NVARCHAR(MAX)
		DECLARE @AppenderConfig XML

		SELECT @Counter = MIN(RowID), @Limit = MAX(RowID)
		FROM @Appenders

		WHILE (@Counter <= @Limit)
		BEGIN
			SELECT @SQL = CONCAT(A.AppenderType, ' @LoggerName, @LogLevelName, @Message, @Config, @CorrelationId, @Debug, @TokenValues')
			,@AppenderConfig = AppenderConfig
			FROM @Appenders A
			WHERE 1=1
			AND RowID = @Counter

			IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@SQL:', @SQL)
			IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@Message:', @Message)
			IF (@Debug = 1) PRINT CONCAT('[', OBJECT_NAME(@@PROCID), ']:@AppenderConfig:', CONVERT(VARCHAR(MAX), @AppenderConfig))

			EXECUTE sp_executesql @SQL, N'@LoggerName VARCHAR(500), @LogLevelName VARCHAR(500), @Message VARCHAR(MAX), @Config XML, @CorrelationId VARCHAR(50), @Debug BIT, @TokenValues VARCHAR(MAX)'
			, @LoggerName    = @LoggerName
			, @LogLevelName  = @RequestedLogLevelName
			, @Message       = @Message
			, @Config        = @AppenderConfig
			, @CorrelationId = @CorrelationId
			, @Debug         = @Debug
			, @TokenValues   = @TokenValues

			SET @Counter += 1

		END
	END TRY
	BEGIN CATCH
		--PRINT CONCAT('Procedure ', ERROR_PROCEDURE(), ' on line ', ERROR_LINE(), 'Error Number (', ERROR_NUMBER(),') Message: ', ERROR_MESSAGE())
		PRINT (Logger.DefaultErrorMessage())
	END CATCH

GO


GO
IF OBJECT_ID('Logger.Debug') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.Debug
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE Logger.Debug

    Date:           07/07/2017
    Author:         Jerome Pion
    Description:    Log a DEBUG level message.

    --TEST
	DECLARE @Config XML = '
	<log4mssql>
  <appender name="Test-Console" type="LoggerBase.Appender_ConsoleAppender">
    <layout type="LoggerBase.Layout_PatternLayout">
      <conversionPattern value="%timestamp %level %server %dbname %thread %logger-%message" />
    </layout>
  </appender>
  <root>
    <level value="DEBUG" />
    <appender-ref ref="Test-Console" />
  </root>
</log4mssql>
	'
	DECLARE @LogConfiguration LogConfiguration
	SET @LogConfiguration = Logger.Configuration_Set(@LogConfiguration, 'ConfigurationXml', CONVERT(NVARCHAR(MAX), @Config))
	EXEC Logger.Debug @Message = 'A test INFO message', @LogConfiguration = @LogConfiguration

**********************************************************************************************/

ALTER PROCEDURE Logger.Debug
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500) = NULL
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @LogConfiguration      LogConfiguration	
	, @Debug                 BIT          = 0
)

AS

    SET NOCOUNT ON

	BEGIN TRY
		DECLARE @TokenValues VARCHAR(MAX) = CONCAT(@@SERVERNAME, '|', DB_NAME(), '|', @@SPID)

		EXEC LoggerBase.Logger_Base 
		  @Message               = @Message
		, @LoggerName            = @LoggerName
		, @RequestedLogLevelName = 'DEBUG'
		, @Config                = @Config
		, @StoredConfigName      = @StoredConfigName
		, @LogConfiguration      = @LogConfiguration
		, @TokenValues           = @TokenValues
		, @DEBUG                 = @DEBUG
	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ')')
		PRINT @ErrorMessage
	END CATCH

GO
IF OBJECT_ID('Logger.Error') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.Error
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO


/*********************************************************************************************

    PROCEDURE Logger.ERROR

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a ERROR level message.

	Change Log: 
	Jpion - 03/08/2019 - Make @Message optional and populate with default error message if null.

    --TEST
DECLARE @Config XML = '
	<log4mssql>
  <appender name="Test-Console" type="LoggerBase.Appender_ConsoleAppender">
    <layout type="LoggerBase.Layout_PatternLayout">
      <conversionPattern value="%timestamp %level %server %dbname %thread %logger-%message" />
    </layout>
  </appender>
  <root>
    <level value="DEBUG" />
    <appender-ref ref="Test-Console" />
  </root>
</log4mssql>
	'
	DECLARE @LogConfiguration LogConfiguration
	SET @LogConfiguration = Logger.Configuration_Set(@LogConfiguration, 'ConfigurationXml', CONVERT(NVARCHAR(MAX), @Config))
	EXEC Logger.Error @Message = 'A test INFO message', @LogConfiguration = @LogConfiguration

**********************************************************************************************/

ALTER PROCEDURE [Logger].[Error]
(
	  @Message               VARCHAR(MAX) = NULL
	, @LoggerName            VARCHAR(500) = NULL
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @LogConfiguration      LogConfiguration = NULL
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	BEGIN TRY
		DECLARE @TokenValues VARCHAR(MAX) = CONCAT(@@SERVERNAME, '|', DB_NAME(), '|', @@SPID)

		IF @Message IS NULL EXEC Logger.DefaultErrorMessage @Message OUTPUT

		EXEC LoggerBase.Logger_Base 
		  @Message               = @Message
		, @LoggerName            = @LoggerName
		, @RequestedLogLevelName = 'ERROR'
		, @Config                = @Config
		, @StoredConfigName      = @StoredConfigName
		, @LogConfiguration      = @LogConfiguration
		, @TokenValues           = @TokenValues
		, @DEBUG                 = @DEBUG
	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ')')
		PRINT @ErrorMessage
	END CATCH

GO
GO
IF OBJECT_ID('Logger.Fatal') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.Fatal
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE Logger.Fatal

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a Fatal level message.

    --TEST
	DECLARE @Config XML = '
	<log4mssql>
  <appender name="Test-Console" type="LoggerBase.Appender_ConsoleAppender">
    <layout type="LoggerBase.Layout_PatternLayout">
      <conversionPattern value="%timestamp %level %server %dbname %thread %logger-%message" />
    </layout>
  </appender>
  <root>
    <level value="DEBUG" />
    <appender-ref ref="Test-Console" />
  </root>
</log4mssql>
	'
	DECLARE @LogConfiguration LogConfiguration
	SET @LogConfiguration = Logger.Configuration_Set(@LogConfiguration, 'ConfigurationXml', CONVERT(NVARCHAR(MAX), @Config))
	EXEC Logger.Fatal @Message = 'A test INFO message', @LogConfiguration = @LogConfiguration

**********************************************************************************************/

ALTER PROCEDURE Logger.Fatal
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500) = NULL
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @LogConfiguration      LogConfiguration
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	BEGIN TRY
		DECLARE @TokenValues VARCHAR(MAX) = CONCAT(@@SERVERNAME, '|', DB_NAME(), '|', @@SPID)

		EXEC LoggerBase.Logger_Base 
		  @Message               = @Message
		, @LoggerName            = @LoggerName
		, @RequestedLogLevelName = 'FATAL'
		, @Config                = @Config
		, @StoredConfigName      = @StoredConfigName
		, @LogConfiguration      = @LogConfiguration
		, @TokenValues           = @TokenValues
		, @DEBUG                 = @DEBUG
	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ')')
		PRINT @ErrorMessage
	END CATCH

GO
IF OBJECT_ID('Logger.Info') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.Info
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE Logger.Info

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a INFO level message.

    --TEST
	
	DECLARE @Config XML = '
	<log4mssql>
  <appender name="Test-Console" type="LoggerBase.Appender_ConsoleAppender">
    <layout type="LoggerBase.Layout_PatternLayout">
      <conversionPattern value="%timestamp %level %logger-%message" />
    </layout>
  </appender>
  <root>
    <level value="INFO" />
    <appender-ref ref="Test-Console" />
  </root>
</log4mssql>
	'
	DECLARE @LogConfiguration LogConfiguration
	SET @LogConfiguration = Logger.Configuration_Set(@LogConfiguration, 'ConfigurationXml', CONVERT(NVARCHAR(MAX), @Config))
	EXEC Logger.Info @Message = 'A test INFO message', @LogConfiguration = @LogConfiguration

**********************************************************************************************/

ALTER PROCEDURE [Logger].[Info]
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500) = NULL
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @LogConfiguration      LogConfiguration	
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	BEGIN TRY
		DECLARE @TokenValues VARCHAR(MAX) = CONCAT(@@SERVERNAME, '|', DB_NAME(), '|', @@SPID)

		EXEC LoggerBase.Logger_Base 
		  @Message               = @Message
		, @LoggerName            = @LoggerName
		, @RequestedLogLevelName = 'INFO'
		, @Config                = @Config
		, @StoredConfigName      = @StoredConfigName
		, @LogConfiguration      = @LogConfiguration
		, @TokenValues           = @TokenValues
		, @DEBUG                 = @DEBUG
	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ')')
		PRINT @ErrorMessage
	END CATCH

GO


GO
IF OBJECT_ID('Logger.Warn') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.Warn
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO
/*********************************************************************************************

    PROCEDURE Logger.Warn

    Date:           11/28/2017
    Author:         Jerome Pion
    Description:    Log a WARN level message.

    --TEST
	DECLARE @Config XML = '
	<log4mssql>
  <appender name="Test-Console" type="LoggerBase.Appender_ConsoleAppender">
    <layout type="LoggerBase.Layout_PatternLayout">
      <conversionPattern value="%timestamp %level %server %dbname %thread %logger-%message" />
    </layout>
  </appender>
  <root>
    <level value="DEBUG" />
    <appender-ref ref="Test-Console" />
  </root>
</log4mssql>
	'
	DECLARE @LogConfiguration LogConfiguration
	SET @LogConfiguration = Logger.Configuration_Set(@LogConfiguration, 'ConfigurationXml', CONVERT(NVARCHAR(MAX), @Config))
	EXEC Logger.Warn @Message = 'A test INFO message', @LogConfiguration = @LogConfiguration

**********************************************************************************************/

ALTER PROCEDURE Logger.Warn
(
	  @Message               VARCHAR(MAX)
	, @LoggerName            VARCHAR(500) = NULL
	, @Config                XML          = NULL
	, @StoredConfigName      VARCHAR(500) = NULL
	, @LogConfiguration      LogConfiguration
	, @DEBUG                 BIT          = 0
)

AS

    SET NOCOUNT ON

	BEGIN TRY
		DECLARE @TokenValues VARCHAR(MAX) = CONCAT(@@SERVERNAME, '|', DB_NAME(), '|', @@SPID)

		EXEC LoggerBase.Logger_Base 
		  @Message               = @Message
		, @LoggerName            = @LoggerName
		, @RequestedLogLevelName = 'WARN'
		, @Config                = @Config
		, @StoredConfigName      = @StoredConfigName
		, @LogConfiguration      = @LogConfiguration
		, @TokenValues           = @TokenValues
		, @DEBUG                 = @DEBUG
	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ')')
		PRINT @ErrorMessage
	END CATCH

GO
IF OBJECT_ID('Logger.Configure') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.Configure
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE Logger.Configure

    Date:           03/08/2019
    Author:         Jerome Pion
    Description:    Initialize a configuration.

    --TEST

	DECLARE @LogConfiguration LogConfiguration

	EXEC Logger.Configure @CurrentConfiguration = @LogConfiguration, @NewConfiguration = @LogConfiguration OUTPUT, @CallingProcedureId = @@PROCID

	SELECT @LogConfiguration

	EXEC Logger.Configure @CurrentConfiguration = @LogConfiguration, @NewConfiguration = @LogConfiguration OUTPUT, @PropertyName = 'LoggerName', @PropertyValue = 'AssignedLoggerName'

	SELECT @LogConfiguration

	EXEC Logger.Configure @CurrentConfiguration = @LogConfiguration, @NewConfiguration = @LogConfiguration OUTPUT, @PropertyName = 'LoggerName', @PropertyValue = 'AssignedLoggerName', @CallingProcedureId = @@PROCID

	SELECT @LogConfiguration

	EXEC Logger.Configure @CurrentConfiguration = @LogConfiguration, @NewConfiguration = @LogConfiguration OUTPUT, @PropertyName = 'InvalidPropertyName', @PropertyValue = 'AssignedLoggerName', @CallingProcedureId = @@PROCID

	SELECT @LogConfiguration

**********************************************************************************************/

ALTER PROCEDURE Logger.Configure
(
	 @CurrentConfiguration              LogConfiguration
	,@NewConfiguration                  LogConfiguration OUTPUT
	,@CallingProcedureId                INT = NULL
	,@PropertyName                      VARCHAR(5000) = NULL
	,@PropertyValue                     VARCHAR(5000) = NULL
	,@Debug                             BIT = 0
)
AS 
BEGIN

	SET NOCOUNT ON

	BEGIN TRY
	--If @PropertyName is null then set defaults
	SET @NewConfiguration = @CurrentConfiguration

	--Use sp_executesql so that we can catch the error if LoggerBase.Util_Configuration_Properties doesn't exist. 
	IF (@DEBUG = 1) PRINT CONCAT('Checking if @PropertyName ', COALESCE(@PropertyName, 'NULL'), ' is valid')
	DECLARE @PropertyExists BIT
	EXEC sp_executesql N'SELECT @PropertyExists = 1 FROM LoggerBase.Util_Configuration_Properties WHERE ConfigurationPropertyName = @PropertyName', N'@PropertyExists BIT OUTPUT, @PropertyName VARCHAR(5000)', @PropertyExists = @PropertyExists OUTPUT, @PropertyName = @PropertyName
	IF (COALESCE(@PropertyName,'') <> '' AND COALESCE(@PropertyExists, 0) <> 1)
	BEGIN
		PRINT CONCAT('[Logger.Configure]: ', @PropertyName, ' is not a valid configuration property')
		DECLARE @ConfigurationProperties TABLE
		(
			ConfigurationPropertyId INT
			,ConfigurationPropertyName VARCHAR(250)
		)

		INSERT INTO @ConfigurationProperties
		(
		    ConfigurationPropertyId,
		    ConfigurationPropertyName
		)
		EXEC sp_executesql N'SELECT ConfigurationPropertyId, ConfigurationPropertyName FROM LoggerBase.Util_Configuration_Properties'
		PRINT 'Valid propreties are:'
		DECLARE @Counter TINYINT, @Limit TINYINT, @Message VARCHAR(4000)
		SELECT @Counter = MIN(ConfigurationPropertyId), @Limit = MAX(ConfigurationPropertyId) 
		FROM @ConfigurationProperties

		WHILE (@Counter <= @Limit)
		BEGIN
			SELECT @Message = ConfigurationPropertyName
			FROM @ConfigurationProperties
			WHERE 1=1
			AND ConfigurationPropertyId = @Counter

			PRINT CONCAT('  ', @Message)
			SET @Counter += 1

		END --WHILE
	END
	ELSE 
	BEGIN
		DECLARE @CheckSQL NVARCHAR(MAX) = 'SELECT @PropertyExists = IIF(RTRIM(COALESCE(LoggerBase.Configuration_Get(@CurrentConfiguration, @PropertyName),'''')) = '''', 0, 1)'
		DECLARE @SetSQL NVARCHAR(MAX) = 'SELECT @NewConfiguration = LoggerBase.Configuration_Set(@CurrentConfiguration, @PropertyName, @PropertyValue)'
	
		IF (@PropertyName IS NULL)
		BEGIN
			IF (@DEBUG = 1) PRINT '@PropertyName is null. Setting defaults.'

			DECLARE @LoggerName VARCHAR(500) = CONCAT(OBJECT_SCHEMA_NAME(@CallingProcedureId), '.', OBJECT_NAME(@CallingProcedureId))
			IF (@CallingProcedureId IS NOT NULL AND OBJECT_NAME(@CallingProcedureId) IS NOT NULL)
			BEGIN	
				IF (@DEBUG =1) PRINT '@CallingProcedureId is valid. Checking if we should use it to set the logger name.'
				EXEC sp_executesql @CheckSQL, N'@CurrentConfiguration LogConfiguration, @PropertyExists BIT OUTPUT, @PropertyName VARCHAR(5000)', @CurrentConfiguration = @CurrentConfiguration, @PropertyExists = @PropertyExists OUTPUT, @PropertyName = 'LoggerName'
			
				IF (@PropertyExists = 0) 
				BEGIN
					IF (@Debug = 1) PRINT 'LoggerName property is not set. Attempting set using @CallingProcedureId'
					EXEC sp_executesql @SetSQL, N'@NewConfiguration LogConfiguration OUTPUT, @CurrentConfiguration LogConfiguration, @PropertyName VARCHAR(5000), @PropertyValue VARCHAR(5000)',@NewConfiguration = @NewConfiguration OUTPUT, @CurrentConfiguration = @CurrentConfiguration, @PropertyName = 'LoggerName', @PropertyValue = @LoggerName
					SET @CurrentConfiguration = @NewConfiguration
				END
			END
			ELSE
			BEGIN
				EXEC sp_executesql @CheckSQL, N'@CurrentConfiguration LogConfiguration, @PropertyExists BIT OUTPUT, @PropertyName VARCHAR(5000)', @CurrentConfiguration = @CurrentConfiguration, @PropertyExists = @PropertyExists OUTPUT, @PropertyName = 'LoggerName'
			
				IF (@PropertyExists = 0) 
				BEGIN
					IF (@Debug = 1) PRINT 'LoggerName property is not set. Attempting set using default value.'
					EXEC sp_executesql @SetSQL, N'@NewConfiguration LogConfiguration OUTPUT, @CurrentConfiguration LogConfiguration, @PropertyName VARCHAR(5000), @PropertyValue VARCHAR(5000)',@NewConfiguration = @NewConfiguration OUTPUT, @CurrentConfiguration = @CurrentConfiguration, @PropertyName = 'LoggerName', @PropertyValue = 'Undefined Logger'
					SET @CurrentConfiguration = @NewConfiguration
				END
			END
				--Set default LogLevel
				EXEC sp_executesql @SetSQL, N'@NewConfiguration LogConfiguration OUTPUT, @CurrentConfiguration LogConfiguration, @PropertyName VARCHAR(5000), @PropertyValue VARCHAR(5000)',@NewConfiguration = @NewConfiguration OUTPUT, @CurrentConfiguration = @CurrentConfiguration, @PropertyName = 'LogLevel', @PropertyValue = 'INFO'
				SET @CurrentConfiguration = @NewConfiguration
				--Set default CorrelationId
				DECLARE @CorrelationId VARCHAR(20)
				EXEC Logger.CorrelationId @CorrelationId OUTPUT
				IF (@Debug = 1) PRINT CONCAT('Attempting to set @PropertyName: CorrelationId to default value ''', @CorrelationId, '''.')
				EXEC sp_executesql @SetSQL, N'@NewConfiguration LogConfiguration OUTPUT, @CurrentConfiguration LogConfiguration, @PropertyName VARCHAR(5000), @PropertyValue VARCHAR(5000)',@NewConfiguration = @NewConfiguration OUTPUT, @CurrentConfiguration = @CurrentConfiguration, @PropertyName = 'CorrelationId', @PropertyValue = @CorrelationId
				SET @CurrentConfiguration = @NewConfiguration
				--Set default SavedConfigurationName
				EXEC sp_executesql @SetSQL, N'@NewConfiguration LogConfiguration OUTPUT, @CurrentConfiguration LogConfiguration, @PropertyName VARCHAR(5000), @PropertyValue VARCHAR(5000)',@NewConfiguration = @NewConfiguration OUTPUT, @CurrentConfiguration = @CurrentConfiguration, @PropertyName = 'SavedConfigurationName', @PropertyValue = 'DEFAULT'
				SET @CurrentConfiguration = @NewConfiguration
		END
		ELSE
		BEGIN
			IF (@Debug = 1) PRINT CONCAT('Attempting to set @PropertyName: ', @PropertyName, ' to value ''', @PropertyValue, '''.')
			EXEC sp_executesql @SetSQL, N'@NewConfiguration LogConfiguration OUTPUT, @CurrentConfiguration LogConfiguration, @PropertyName VARCHAR(5000), @PropertyValue VARCHAR(5000)',@NewConfiguration = @NewConfiguration OUTPUT, @CurrentConfiguration = @CurrentConfiguration, @PropertyName = @PropertyName, @PropertyValue = @PropertyValue
		END
	END --Valid Property Name Check
	END TRY

	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ') Line: ', ERROR_LINE())
		PRINT @ErrorMessage
	END CATCH
END
GO
GO
IF OBJECT_ID('Logger.CorrelationId') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.CorrelationId
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE Logger.CorrelationId

    Date:           03/08/2019
    Author:         Jerome Pion
    Description:    Gets a probably unique correlation Id

    --TEST

	DECLARE @CorrelationId VARCHAR(20)
	EXEC Logger.CorrelationId @CorrelationId OUTPUT
	SELECT @CorrelationId

**********************************************************************************************/

ALTER PROCEDURE Logger.CorrelationId
(
	 @CorrelationId VARCHAR(20) OUTPUT
)
AS 
BEGIN

	SET NOCOUNT ON

	BEGIN TRY
		SELECT TOP(1) @CorrelationId = CorrelationId FROM LoggerBase.CorrelationId_Helper
	END TRY

	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ') Line: ', ERROR_LINE())
		PRINT @ErrorMessage
	END CATCH
END
GO
GO
IF OBJECT_ID('Logger.DefaultErrorMessage') IS NOT NULL
SET NOEXEC ON
GO

CREATE PROCEDURE Logger.DefaultErrorMessage
AS
	PRINT 'Stub only'
GO

SET NOEXEC OFF
GO

/*********************************************************************************************

    PROCEDURE Logger.DefaultErrorMessage

    Date:           03/08/2019
    Author:         Jerome Pion
    Description:    Wraps the default error message function

    --TEST

	DECLARE @DefaultErrorMessage VARCHAR(20)
	EXEC Logger.DefaultErrorMessage @DefaultErrorMessage OUTPUT
	SELECT @DefaultErrorMessage

**********************************************************************************************/

ALTER PROCEDURE Logger.DefaultErrorMessage
(
	 @DefaultErrorMessage NVARCHAR(MAX) OUTPUT
)
AS 
BEGIN

	SET NOCOUNT ON

	BEGIN TRY
		SET @DefaultErrorMessage = LoggerBase.DefaultErrorMessage()
	END TRY

	BEGIN CATCH
		DECLARE @ErrorMessage VARCHAR(8000) = CONCAT('[',OBJECT_SCHEMA_NAME(@@PROCID),'].[',OBJECT_NAME(@@PROCID),'] An error occurred in the logging framework: ', ERROR_MESSAGE(), ' (', ERROR_NUMBER(), ') Line: ', ERROR_LINE())
		PRINT @ErrorMessage
	END CATCH
END
GO
GO
RAISERROR('',0,1)WITH NOWAIT;
RAISERROR('+-----------------------------------------+',0,1)WITH NOWAIT;
RAISERROR('|                                         |',0,1)WITH NOWAIT;
RAISERROR('| log4mssql installation complete         |',0,1)WITH NOWAIT;
RAISERROR('|                                         |',0,1)WITH NOWAIT;
RAISERROR('+-----------------------------------------+',0,1)WITH NOWAIT;
GO
